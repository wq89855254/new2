{"remainingRequest":"D:\\program\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\program\\frontend\\src\\static\\js\\pather-src.js","dependencies":[{"path":"D:\\program\\frontend\\src\\static\\js\\pather-src.js","mtime":1554889782490},{"path":"D:\\program\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\program\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport _Symbol$for from \"D:\\\\program\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/symbol/for\";\nimport _Symbol from \"D:\\\\program\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/symbol\";\nimport _Object$getOwnPropertyDescriptor from \"D:\\\\program\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$keys from \"D:\\\\program\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/keys\";\nimport _parseInt from \"D:\\\\program\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/parse-int\";\nimport _Object$assign from \"D:\\\\program\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/assign\";\n// var RH_LEAFLET_PATHER_DOT_CIRCLE_RADIUS = 6; //meter\nimport * as d3 from 'd3';\n\n(function main($window) {\n  \"use strict\";\n  /**\r\n   * @method throwException\r\n   * @throws {Error}\r\n   * @return {void}\r\n   */\n\n  function throwException(message) {\n    throw 'L.Pather: ' + message + '.';\n  }\n\n  if (typeof L === 'undefined') {\n    // Ensure Leaflet.js has been included before Pather.\n    throwException('Leaflet.js is required: http://leafletjs.com/');\n  }\n  /**\r\n   * @constant MODES\r\n   * @type {{VIEW: number, CREATE: number, EDIT: number, DELETE: number, APPEND: number, EDIT_APPEND: number, ALL: number}}\r\n   */\n\n\n  var MODES = {\n    VIEW: 1,\n    CREATE: 2,\n    EDIT: 4,\n    DELETE: 8,\n    APPEND: 16,\n    EDIT_APPEND: 4 | 16,\n    ALL: 1 | 2 | 4 | 8 | 16\n  };\n  /**\r\n   * @module Pather\r\n   * @author Adam Timberlake\r\n   * @link https://github.com/Wildhoney/L.Pather\r\n   */\n\n  L.Pather = L.FeatureGroup.extend({\n    /**\r\n     * @method initialize\r\n     * @param {Object} [options={}]\r\n     * @return {void}\r\n     */\n    initialize: function initialize(options) {\n      this.options = _Object$assign(this.defaultOptions(), options || {});\n      this.creating = false;\n      this.polylines = [];\n      this.eventHandlers = [];\n    },\n\n    /**\r\n     * @method createPath\r\n     * @param {L.LatLng[]} latLngs\r\n     * @return {L.Pather.Polyline|Boolean}\r\n     */\n    createPath: function createPath(latLngs, notFireEvent, options) {\n      options = options || {};\n\n      if (latLngs.length <= 1) {\n        return false;\n      }\n\n      this.clearAll();\n      var polyline = new L.Pather.Polyline(this.map, latLngs, L.extend({}, this.options, options), {\n        fire: this.fire.bind(this),\n        mode: this.getMode.bind(this),\n        remove: this.removePath.bind(this)\n      });\n      this.polylines.push(polyline);\n\n      if (!notFireEvent) {\n        this.fire('created', {\n          polyline: polyline,\n          latLngs: polyline.getLatLngs()\n        });\n      }\n\n      return polyline;\n    },\n\n    /**\r\n     * @method removePath\r\n     * @param {L.Pather.Polyline} model\r\n     * @return {Boolean}\r\n     */\n    removePath: function removePath(model) {\n      if (model instanceof L.Pather.Polyline) {\n        var indexOf = this.polylines.indexOf(model);\n        this.polylines.splice(indexOf, 1);\n        model.softRemove();\n        this.fire('deleted', {\n          polyline: model,\n          latLngs: []\n        });\n        return true;\n      }\n\n      return false;\n    },\n    removeAllPaths: function removeAllPaths() {\n      for (var i = this.polylines.length - 1; i >= 0; i--) {\n        this.removePath(this.polylines[i]);\n      }\n    },\n    removeBeforPath: function removeAllPaths() {\n      this.removePath(this.polylines[0]);\n    },\n\n    /**\r\n     * @method getPaths\r\n     * @return {Array}\r\n     */\n    getPaths: function getPolylines() {\n      return this.polylines;\n    },\n\n    /**\r\n     * @method onAdd\r\n     * @param {L.Map} map\r\n     * @return {void}\r\n     */\n    onAdd: function onAdd(map) {\n      var element = this.element = this.options.element || map.getContainer();\n      this.draggingState = map.dragging._enabled;\n      this.map = map;\n      this.fromPoint = {\n        x: 0,\n        y: 0\n      };\n      this.svg = d3.select(element).append('svg').attr('pointer-events', 'none').attr('class', this.getOption('moduleClass')).attr('width', this.getOption('width')).attr('height', this.getOption('height'));\n      map.dragging.disable(); // Attach the mouse events for drawing the polyline.\n\n      this.attachEvents(map);\n      this.setMode(this.options.mode);\n    },\n\n    /**\r\n     * @method onRemove\r\n     * @return {void}\r\n     */\n    onRemove: function onRemove() {\n      this.svg.remove();\n\n      if (this.options.removePolylines) {\n        var length = this.polylines.length;\n\n        while (length--) {\n          this.removePath(this.polylines[length]);\n        }\n      }\n\n      this.map.off('mousedown', this.eventHandlers.mouseDown);\n      this.map.off('mousemove', this.eventHandlers.mouseMove);\n      this.map.off('mouseup', this.eventHandlers.mouseUp);\n      this.map.getContainer().removeEventListener('mouseleave', this.eventHandlers.mouseLeave);\n      this.element.classList.remove('mode-create');\n      this.element.classList.remove('mode-delete');\n      this.element.classList.remove('mode-edit');\n      this.element.classList.remove('mode-append');\n      var tileLayer = this.map.getContainer().querySelector('.leaflet-tile-pane'),\n          originalState = this.draggingState ? 'enable' : 'disable';\n      tileLayer.style.pointerEvents = 'all';\n      this.map.dragging[originalState]();\n    },\n\n    /**\r\n     * @method getEvent\r\n     * @param {Object} event\r\n     * @return {Object}\r\n     */\n    getEvent: function getEvent(event) {\n      if (event.touches) {\n        return event.touches[0];\n      }\n\n      return event;\n    },\n\n    /**\r\n     * @method edgeBeingChanged\r\n     * @return {Array}\r\n     */\n    edgeBeingChanged: function edgeBeingChanged() {\n      var edges = this.polylines.filter(function filter(polyline) {\n        return polyline.manipulating;\n      });\n      return edges.length === 0 ? null : edges[0];\n    },\n\n    /**\r\n     * @method isPolylineCreatable\r\n     * @return {Boolean}\r\n     */\n    isPolylineCreatable: function isPolylineCreatable() {\n      return !!(this.options.mode & MODES.CREATE);\n    },\n\n    /**\r\n     * @property events\r\n     * @type {Object}\r\n     */\n    events: {\n      /**\r\n       * @method mouseDown\r\n       * @param {Object} event\r\n       */\n      mouseDown: function mouseDown(event) {\n        event = event.originalEvent || this.getEvent(event);\n        var point = this.map.mouseEventToContainerPoint(event),\n            latLng = this.map.containerPointToLatLng(point);\n\n        if (this.isPolylineCreatable() && !this.edgeBeingChanged()) {\n          this.creating = true;\n          this.fromPoint = this.map.latLngToContainerPoint(latLng);\n          this.latLngs = [];\n        }\n      },\n\n      /**\r\n       * @method mouseMove\r\n       * @param {Object} event\r\n       * @return {void}\r\n       */\n      mouseMove: function mouseMove(event) {\n        event = event.originalEvent || this.getEvent(event);\n        var point = this.map.mouseEventToContainerPoint(event);\n\n        if (this.edgeBeingChanged()) {\n          this.edgeBeingChanged().moveTo(this.map.containerPointToLayerPoint(point));\n          return;\n        } // var lineFunction = d3.svg.line()\n        //     .x(function x(d) { return d.x; })\n        //     .y(function y(d) { return d.y; })\n\n\n        var lineFunction = d3.line().x(function x(d) {\n          return d.x;\n        }).y(function y(d) {\n          return d.y;\n        }).curve(d3.curveLinear); //                     // .interpolate('linear');\n\n        if (this.creating) {\n          if (this.options.shape == 'line') {\n            var lineData = [this.fromPoint, new L.Point(point.x, point.y, false)];\n            this.svg.text('');\n            this.svg.append('path').classed(this.getOption('lineClass'), true).attr('d', lineFunction(lineData)).attr('stroke', this.getOption('strokeColour')).attr('stroke-width', this.getOption('strokeWidth')).attr('fill', 'none');\n\n            if (this.latLngs.length < 2) {\n              this.latLngs.push(point);\n            } else {\n              this.latLngs[1] = point;\n            }\n          } else if (this.options.shape == 'rect') {\n            var lineData = [this.fromPoint, new L.Point(point.x, this.fromPoint.y), point, new L.Point(this.fromPoint.x, point.y), this.fromPoint];\n            this.svg.text('');\n            this.svg.append('path').classed(this.getOption('lineClass'), true).attr('d', lineFunction(lineData)).attr('stroke', this.getOption('strokeColour')).attr('stroke-width', this.getOption('strokeWidth')).attr('fill', 'none');\n\n            if (this.latLngs.length < 2) {\n              this.latLngs.push(this.fromPoint);\n            } else {\n              this.latLngs[1] = new L.Point(point.x, this.fromPoint.y);\n              this.latLngs[2] = point;\n              this.latLngs[3] = new L.Point(this.fromPoint.x, point.y);\n              this.latLngs[4] = this.fromPoint;\n            }\n          } else if (this.options.shape == 'circle') {\n            var lineData = [this.fromPoint, new L.Point(point.x, point.y, false)];\n            var dx = point.x - this.fromPoint.x;\n            var dy = point.y - this.fromPoint.y;\n            var r = Math.sqrt(dx * dx + dy * dy);\n            this.svg.text('');\n            this.svg.append('circle').classed(this.getOption('lineClass'), true).attr('cx', this.fromPoint.x).attr('cy', this.fromPoint.y).attr('r', r).attr('stroke', this.getOption('strokeColour')).attr('stroke-width', this.getOption('strokeWidth')).attr('fill', 'none');\n\n            if (this.latLngs.length < 2) {\n              this.latLngs.push(point);\n            } else {\n              this.latLngs[1] = point;\n            }\n          } else if (this.options.shape == 'dot') {\n            var lineData = [this.fromPoint, new L.Point(this.fromPoint.x, this.fromPoint.y, false)];\n            var r = 20;\n            this.svg.text('');\n            this.svg.append('circle').classed(this.getOption('lineClass'), true).attr('cx', this.fromPoint.x).attr('cy', this.fromPoint.y).attr('r', r).attr('stroke', this.getOption('strokeColour')).attr('stroke-width', this.getOption('strokeWidth')).attr('fill', 'none');\n\n            if (this.latLngs.length < 2) {\n              this.latLngs.push(this.fromPoint);\n            } else {\n              this.latLngs[1] = this.fromPoint;\n            }\n          } else if (this.options.shape == 'polyline' || this.options.shape == 'polygon') {\n            var lineData = [this.fromPoint, new L.Point(point.x, point.y, false)];\n            this.latLngs.push(point);\n            this.svg.append('path').classed(this.getOption('lineClass'), true).attr('d', lineFunction(lineData)).attr('stroke', this.getOption('strokeColour')).attr('stroke-width', this.getOption('strokeWidth')).attr('fill', 'none');\n            this.fromPoint = {\n              x: point.x,\n              y: point.y\n            };\n          }\n        }\n      },\n\n      /**\r\n       * @method mouseLeave\r\n       * @return {void}\r\n       */\n      mouseLeave: function mouseLeave() {//                this.clearAll();\n        //                this.creating = false;\n      },\n\n      /**\r\n       * @method mouseUp\r\n       * @return {void}\r\n       */\n      mouseUp: function mouseup() {\n        console.log(this);\n\n        if (this.creating) {\n          this.creating = false;\n\n          if (this.options.shape == 'polygon') {\n            this.latLngs.push(this.latLngs[0]);\n          }\n\n          this.createPath(this.convertPointsToLatLngs(this.latLngs));\n          this.latLngs = [];\n          return;\n        }\n\n        if (this.edgeBeingChanged()) {\n          this.edgeBeingChanged().attachElbows();\n          this.edgeBeingChanged().finished();\n          this.edgeBeingChanged().manipulating = false;\n        }\n      }\n    },\n\n    /**\r\n     * @method attachEvents\r\n     * @param {L.Map} map\r\n     * @return {void}\r\n     */\n    attachEvents: function attachEvents(map) {\n      this.eventHandlers = {\n        mouseDown: this.events.mouseDown.bind(this),\n        mouseMove: this.events.mouseMove.bind(this),\n        mouseUp: this.events.mouseUp.bind(this),\n        mouseLeave: this.events.mouseLeave.bind(this)\n      };\n      this.map.on('mousedown', this.eventHandlers.mouseDown);\n      this.map.on('mousemove', this.eventHandlers.mouseMove);\n      this.map.on('mouseup', this.eventHandlers.mouseUp);\n      this.map.getContainer().addEventListener('mouseleave', this.eventHandlers.mouseLeave); // Attach the mobile events that delegate to the desktop events.\n\n      this.map.getContainer().addEventListener('touchstart', this.fire.bind(map, 'mousedown'));\n      this.map.getContainer().addEventListener('touchmove', this.fire.bind(map, 'mousemove'));\n      this.map.getContainer().addEventListener('touchend', this.fire.bind(map, 'mouseup'));\n    },\n\n    /**\r\n     * @method convertPointsToLatLngs\r\n     * @param {Point[]} points\r\n     * @return {LatLng[]}\r\n     */\n    convertPointsToLatLngs: function convertPointsToLatLngs(points) {\n      return points.map(function map(point) {\n        return this.map.containerPointToLatLng(point);\n      }.bind(this));\n    },\n\n    /**\r\n     * @method clearAll\r\n     * @return {void}\r\n     */\n    clearAll: function clearAll() {\n      this.svg.text('');\n    },\n\n    /**\r\n     * @method getOption\r\n     * @param {String} property\r\n     * @return {String|Number}\r\n     */\n    getOption: function getOption(property) {\n      return this.options[property] || this.defaultOptions()[property];\n    },\n\n    /**\r\n     * @method defaultOptions\r\n     * @return {Object}\r\n     */\n    defaultOptions: function defaultOptions() {\n      return {\n        moduleClass: 'pather',\n        lineClass: 'drawing-line',\n        detectTouch: true,\n        elbowClass: 'elbow',\n        removePolylines: true,\n        strokeColour: 'rgba(0,0,0,.5)',\n        strokeWidth: 2,\n        width: '100%',\n        height: '100%',\n        smoothFactor: 10,\n        pathColour: 'black',\n        pathOpacity: 0.55,\n        fillOpacity: 0.45,\n        pathWidth: 3,\n        mode: MODES.ALL,\n        shape: 'polygon'\n      };\n    },\n    setShape: function setShape(shape) {\n      this.options.shape = shape;\n    },\n    getShape: function getShape() {\n      return this.options.shape;\n    },\n\n    /**\r\n     * @method setSmoothFactor\r\n     * @param {Number} smoothFactor\r\n     * @return {void}\r\n     */\n    setSmoothFactor: function setSmoothFactor(smoothFactor) {\n      this.options.smoothFactor = _parseInt(smoothFactor);\n    },\n\n    /**\r\n     * @method setMode\r\n     * @param {Number} mode\r\n     * @return {void}\r\n     */\n    setMode: function setMode(mode) {\n      this.setClassName(mode);\n      this.options.mode = mode;\n      var tileLayer = this.map.getContainer().querySelector('.leaflet-tile-pane');\n      /**\r\n       * @method shouldDisableDrag\r\n       * @return {Boolean}\r\n       * @see http://www.stucox.com/blog/you-cant-detect-a-touchscreen/\r\n       */\n\n      var shouldDisableDrag = function shouldDisableDrag() {\n        if (this.detectTouch && ('ontouchstart' in $window || 'onmsgesturechange' in $window)) {\n          return this.options.mode & MODES.CREATE || this.options.mode & MODES.EDIT;\n        }\n\n        return this.options.mode & MODES.CREATE;\n      }.bind(this);\n\n      if (shouldDisableDrag()) {\n        var originalState = this.draggingState ? 'disable' : 'enable';\n        tileLayer.style.pointerEvents = 'none';\n        return void this.map.dragging[originalState]();\n      }\n\n      tileLayer.style.pointerEvents = 'all';\n      this.map.dragging.enable();\n    },\n\n    /**\r\n     * @method setClassName\r\n     * @param {Number} mode\r\n     * @return {void}\r\n     */\n    setClassName: function setClassName(mode) {\n      /**\r\n       * @method conditionallyAppendClassName\r\n       * @param {String} modeName\r\n       * @return {void}\r\n       */\n      var conditionallyAppendClassName = function conditionallyAppendClassName(modeName) {\n        var className = ['mode', modeName].join('-');\n\n        if (MODES[modeName.toUpperCase()] & mode) {\n          return void this.element.classList.add(className);\n        }\n\n        this.element.classList.remove(className);\n      }.bind(this);\n\n      conditionallyAppendClassName('create');\n      conditionallyAppendClassName('delete');\n      conditionallyAppendClassName('edit');\n      conditionallyAppendClassName('append');\n    },\n\n    /**\r\n     * @method getMode\r\n     * @return {Number}\r\n     */\n    getMode: function getMode() {\n      return this.options.mode;\n    },\n\n    /**\r\n     * @method setOptions\r\n     * @param {Object} options\r\n     * @return {void}\r\n     */\n    setOptions: function setOptions(options) {\n      this.options = _Object$assign(this.options, options || {});\n    }\n  });\n  /**\r\n   * @constant L.Pather.MODE\r\n   * @type {Object}\r\n   */\n\n  L.Pather.MODE = MODES; // Simple factory that Leaflet loves to bundle.\n\n  L.pather = function pather(options) {\n    return new L.Pather(options);\n  };\n})(window);\n\n(function main() {\n  \"use strict\";\n  /* jshint ignore:start */\n\n  if (!_Object$assign) {\n    Object.defineProperty(Object, 'assign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: function value(target, firstSource) {\n        'use strict';\n\n        if (target === undefined || target === null) {\n          throw new TypeError('Cannot convert first argument to object');\n        }\n\n        var to = Object(target);\n\n        for (var i = 1; i < arguments.length; i++) {\n          var nextSource = arguments[i];\n\n          if (nextSource === undefined || nextSource === null) {\n            continue;\n          }\n\n          nextSource = Object(nextSource);\n\n          var keysArray = _Object$keys(Object(nextSource));\n\n          for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n            var nextKey = keysArray[nextIndex];\n\n            var desc = _Object$getOwnPropertyDescriptor(nextSource, nextKey);\n\n            if (desc !== undefined && desc.enumerable) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n\n        return to;\n      }\n    });\n  }\n  /* jshint ignore:end */\n\n})();\n\n(function main() {\n  \"use strict\";\n  /**\r\n   * @constant DATA_ATTRIBUTE\r\n   * @type {String|Symbol}\r\n   */\n\n  var DATA_ATTRIBUTE = typeof _Symbol === 'undefined' ? '_pather' : _Symbol$for('pather');\n  /**\r\n   * @module Pather\r\n   * @submodule Polyline\r\n   * @param {L.Map} map\r\n   * @param {L.LatLng[]} latLngs\r\n   * @param {Object} [options={}]\r\n   * @param {Object} methods\r\n   * @return {Polyline}\r\n   * @constructor\r\n   */\n\n  L.Pather.Polyline = function Polyline(map, latLngs, options, methods) {\n    this.options = {\n      color: options.pathColour,\n      opacity: options.pathOpacity,\n      weight: options.pathWidth,\n      smoothFactor: options.smoothFactor || 1,\n      elbowClass: options.elbowClass,\n      shape: options.shape\n    };\n\n    if (options.shape === 'polygon') {\n      this.polyline = new L.Polygon(latLngs, L.extend({}, this.options, options)).addTo(map);\n    } else if (options.shape === 'rect') {\n      this.polyline = new L.Polygon(latLngs, L.extend({}, this.options, options)).addTo(map);\n    } else if (options.shape === 'circle') {\n      if (latLngs.length !== 2) {\n        throw new Error('Circle shapre point does not equeal to 2');\n      }\n\n      var center = latLngs[0];\n      var r = latLngs[0].distanceTo(latLngs[1]);\n      this.polyline = new L.Circle(center, r, L.extend({}, this.options, options)).addTo(map);\n    } else if (options.shape === 'dot') {\n      if (latLngs.length !== 2) {\n        throw new Error('Dot point does not equeal to 2');\n      }\n\n      var center = latLngs[0];\n      var r = 20;\n      this.polyline = new L.Circle(center, r, L.extend({}, this.options, options)).addTo(map);\n    } else if (options.shape === 'polyline' || options.shape === 'line') {\n      this.polyline = new L.Polyline(latLngs, L.extend({}, this.options, options)).addTo(map);\n    }\n\n    this.map = map;\n    this.methods = methods;\n    this.edges = [];\n    this.manipulating = false;\n    this.attachPolylineEvents(this.polyline);\n    this.select();\n  };\n  /**\r\n   * @property prototype\r\n   * @type {Object}\r\n   */\n\n\n  L.Pather.Polyline.prototype = {\n    /**\r\n     * @method select\r\n     * @return {void}\r\n     */\n    select: function select() {\n      this.attachElbows();\n    },\n\n    /**\r\n     * @method deselect\r\n     * @return {void}\r\n     */\n    deselect: function deselect() {\n      this.manipulating = false;\n    },\n\n    /**\r\n     * @method attachElbows\r\n     * @return {void}\r\n     */\n    attachElbows: function attachElbows() {\n      this.detachElbows();\n\n      if (this.polyline._parts) {\n        this.polyline._parts[0].forEach(function forEach(point) {\n          var divIcon = new L.DivIcon({\n            className: this.options.elbowClass\n          }),\n              latLng = this.map.layerPointToLatLng(point),\n              edge = new L.Marker(latLng, {\n            icon: divIcon\n          }).addTo(this.map);\n          edge[DATA_ATTRIBUTE] = {\n            point: point\n          };\n          this.attachElbowEvents(edge);\n          this.edges.push(edge);\n        }.bind(this));\n      }\n    },\n\n    /**\r\n     * @method detachElbows\r\n     * @return {void}\r\n     */\n    detachElbows: function detachElbows() {\n      this.edges.forEach(function forEach(edge) {\n        this.map.removeLayer(edge);\n      }.bind(this));\n      this.edges.length = 0;\n    },\n\n    /**\r\n     * @method attachPolylineEvents\r\n     * @param {L.Polyline} polyline\r\n     * @return {void}\r\n     */\n    attachPolylineEvents: function attachPathEvent(polyline) {\n      polyline.on('click', function click(event) {\n        event.originalEvent.stopPropagation();\n        event.originalEvent.preventDefault();\n\n        if (this.methods.mode() & L.Pather.MODE.APPEND) {\n          // Appending takes precedence over deletion!\n          var latLng = this.map.mouseEventToLatLng(event.originalEvent);\n          this.insertElbow(latLng);\n        } else if (this.methods.mode() & L.Pather.MODE.DELETE) {\n          this.methods.remove(this);\n        }\n      }.bind(this));\n      polyline.on('mousemove', function (event) {\n        if (this.methods.mode() & L.Pather.MODE.DELETE) {\n          this.polyline.setStyle({\n            'fillOpacity': 1\n          });\n        }\n      }.bind(this));\n      polyline.on('mouseout', function (event) {\n        if (this.methods.mode() & L.Pather.MODE.DELETE) {\n          this.polyline.setStyle({\n            'fillOpacity': 0.45\n          });\n        }\n      }.bind(this));\n    },\n\n    /**\r\n     * @method attachElbowEvents\r\n     * @param {L.Marker} marker\r\n     * @return {void}\r\n     */\n    attachElbowEvents: function attachElbowEvents(marker) {\n      var self = this;\n      marker.on('mousedown', function mousedown(event) {\n        self.map.dragging.disable();\n        event = event.originalEvent || event;\n\n        if (this.methods.mode() & L.Pather.MODE.EDIT) {\n          if (event.stopPropagation) {\n            event.stopPropagation();\n            event.preventDefault();\n          }\n\n          this.manipulating = marker;\n        }\n      }.bind(this));\n      marker.on('mouseup', function mouseup(event) {\n        self.map.dragging.enable();\n        event = event.originalEvent || event;\n\n        if (event.stopPropagation) {\n          event.stopPropagation();\n          event.preventDefault();\n        }\n\n        this.manipulating = false;\n      }); // Attach the mobile events to delegate to the desktop equivalent events.\n\n      marker._icon.addEventListener('touchstart', marker.fire.bind(marker, 'mousedown'));\n\n      marker._icon.addEventListener('touchend', marker.fire.bind(marker, 'mouseup'));\n    },\n\n    /**\r\n     * @method insertElbow\r\n     * @param {L.LatLng} latLng\r\n     * @return {void}\r\n     */\n    insertElbow: function insertElbow(latLng) {\n      var newPoint = this.map.latLngToLayerPoint(latLng),\n          leastDistance = Infinity,\n          insertAt = -1,\n          points = this.polyline._parts[0];\n      points.forEach(function forEach(currentPoint, index) {\n        var nextPoint = points[index + 1] || points[0],\n            distance = L.LineUtil.pointToSegmentDistance(newPoint, currentPoint, nextPoint);\n\n        if (distance < leastDistance) {\n          leastDistance = distance;\n          insertAt = index;\n        }\n      }.bind(this));\n      points.splice(insertAt + 1, 0, newPoint);\n      var parts = points.map(function map(point) {\n        var latLng = this.map.layerPointToLatLng(point);\n        return {\n          _latlng: latLng\n        };\n      }.bind(this));\n      this.redraw(parts);\n      this.attachElbows();\n      this.finished();\n    },\n\n    /**\r\n     * @method moveTo\r\n     * @param {L.Point} point\r\n     * @return {void}\r\n     */\n    moveTo: function moveTo(point) {\n      var latLng = this.map.layerPointToLatLng(point);\n      this.manipulating.setLatLng(latLng);\n      this.redraw(this.edges);\n    },\n\n    /**\r\n     * @method finished\r\n     * @return {void}\r\n     */\n    finished: function finished() {\n      this.methods.fire('edited', {\n        polyline: this,\n        latLngs: this.getLatLngs()\n      });\n    },\n\n    /**\r\n     * @method redraw\r\n     * @param {Array} edges\r\n     * @return {void}\r\n     */\n    redraw: function redraw(edges) {\n      var latLngs = [],\n          options = {};\n      edges.forEach(function forEach(edge) {\n        latLngs.push(edge._latlng);\n      });\n\n      _Object$keys(this.options).forEach(function forEach(key) {\n        options[key] = this.options[key];\n      }.bind(this));\n\n      options.smoothFactor = 0;\n      this.softRemove(false);\n\n      if (this.options.shape === 'polygon') {\n        this.polyline = new L.Polygon(latLngs, options).addTo(this.map);\n      } else if (options.shape === 'rect') {\n        this.polyline = new L.Polygon(latLngs, L.extend({}, this.options, options)).addTo(map);\n      } else if (this.options.shape === 'circle') {\n        if (latLngs.length !== 2) {\n          throw new Error('Circle shapre point does not equeal to 2');\n        }\n\n        var center = latLngs[0];\n        var r = latLngs[0].distanceTo(latLngs[1]);\n        this.polyline = new L.Circle(center, r, options).addTo(this.map);\n      } else if (this.options.shape === 'dot') {\n        if (latLngs.length !== 2) {\n          throw new Error('Dot shapre point does not equeal to 2');\n        }\n\n        var center = latLngs[0];\n        var r = 20;\n        this.polyline = new L.Circle(center, r, options).addTo(this.map);\n      } else if (this.options.shape === 'polyline' || this.options.shape === 'line') {\n        this.polyline = new L.Polyline(latLngs, options).addTo(this.map);\n      } //            this.polyline = this.options.shape === 'polygon' ? new L.Polygon(latLngs, options).addTo(this.map) : new L.Polyline(latLngs, options).addTo(this.map);\n\n\n      this.attachPolylineEvents(this.polyline);\n    },\n\n    /**\r\n     * @method softRemove\r\n     * @param {Boolean} [edgesToo=true]\r\n     * @return {void}\r\n     */\n    softRemove: function softRemove(edgesToo) {\n      edgesToo = typeof edgesToo === 'undefined' ? true : edgesToo;\n      this.map.removeLayer(this.polyline);\n\n      if (edgesToo) {\n        this.edges.forEach(function forEach(edge) {\n          this.map.removeLayer(edge);\n        }.bind(this));\n      }\n    },\n\n    /**\r\n     * @method getLatLngs\r\n     * @return {LatLng[]}\r\n     */\n    getLatLngs: function getLatLngs() {\n      if (this.polyline._parts) {\n        return this.polyline._parts[0].map(function map(part) {\n          return this.map.layerPointToLatLng(part);\n        }.bind(this));\n      } else if (this.polyline._mRadius) {\n        return [this.polyline.getBounds().getNorthWest(), this.polyline.getBounds().getSouthEast()];\n      }\n    }\n  };\n})();",{"version":3,"sources":["D:\\program\\frontend\\src\\static\\js\\pather-src.js"],"names":["d3","main","$window","throwException","message","L","MODES","VIEW","CREATE","EDIT","DELETE","APPEND","EDIT_APPEND","ALL","Pather","FeatureGroup","extend","initialize","options","defaultOptions","creating","polylines","eventHandlers","createPath","latLngs","notFireEvent","length","clearAll","polyline","Polyline","map","fire","bind","mode","getMode","remove","removePath","push","getLatLngs","model","indexOf","splice","softRemove","removeAllPaths","i","removeBeforPath","getPaths","getPolylines","onAdd","element","getContainer","draggingState","dragging","_enabled","fromPoint","x","y","svg","select","append","attr","getOption","disable","attachEvents","setMode","onRemove","removePolylines","off","mouseDown","mouseMove","mouseUp","removeEventListener","mouseLeave","classList","tileLayer","querySelector","originalState","style","pointerEvents","getEvent","event","touches","edgeBeingChanged","edges","filter","manipulating","isPolylineCreatable","events","originalEvent","point","mouseEventToContainerPoint","latLng","containerPointToLatLng","latLngToContainerPoint","moveTo","containerPointToLayerPoint","lineFunction","line","d","curve","curveLinear","shape","lineData","Point","text","classed","dx","dy","r","Math","sqrt","mouseup","console","log","convertPointsToLatLngs","attachElbows","finished","on","addEventListener","points","property","moduleClass","lineClass","detectTouch","elbowClass","strokeColour","strokeWidth","width","height","smoothFactor","pathColour","pathOpacity","fillOpacity","pathWidth","setShape","getShape","setSmoothFactor","setClassName","shouldDisableDrag","enable","conditionallyAppendClassName","modeName","className","join","toUpperCase","add","setOptions","MODE","pather","window","Object","defineProperty","enumerable","configurable","writable","value","target","firstSource","undefined","TypeError","to","arguments","nextSource","keysArray","nextIndex","len","nextKey","desc","DATA_ATTRIBUTE","methods","color","opacity","weight","Polygon","addTo","Error","center","distanceTo","Circle","attachPolylineEvents","prototype","deselect","detachElbows","_parts","forEach","divIcon","DivIcon","layerPointToLatLng","edge","Marker","icon","attachElbowEvents","removeLayer","attachPathEvent","click","stopPropagation","preventDefault","mouseEventToLatLng","insertElbow","setStyle","marker","self","mousedown","_icon","newPoint","latLngToLayerPoint","leastDistance","Infinity","insertAt","currentPoint","index","nextPoint","distance","LineUtil","pointToSegmentDistance","parts","_latlng","redraw","setLatLng","key","edgesToo","part","_mRadius","getBounds","getNorthWest","getSouthEast"],"mappings":"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","sourcesContent":["// var RH_LEAFLET_PATHER_DOT_CIRCLE_RADIUS = 6; //meter\r\nimport * as d3 from 'd3';\r\n(function main($window) {\r\n\r\n    \"use strict\";\r\n\r\n    /**\r\n     * @method throwException\r\n     * @throws {Error}\r\n     * @return {void}\r\n     */\r\n    function throwException(message) {\r\n        throw 'L.Pather: ' + message + '.';\r\n    }\r\n\r\n    if (typeof L === 'undefined') {\r\n\r\n        // Ensure Leaflet.js has been included before Pather.\r\n        throwException('Leaflet.js is required: http://leafletjs.com/');\r\n\r\n    }\r\n\r\n    /**\r\n     * @constant MODES\r\n     * @type {{VIEW: number, CREATE: number, EDIT: number, DELETE: number, APPEND: number, EDIT_APPEND: number, ALL: number}}\r\n     */\r\n    var MODES = {\r\n        VIEW:        1,\r\n        CREATE:      2,\r\n        EDIT:        4,\r\n        DELETE:      8,\r\n        APPEND:      16,\r\n        EDIT_APPEND: 4 | 16,\r\n        ALL:         1 | 2 | 4 | 8 | 16\r\n    };\r\n\r\n    /**\r\n     * @module Pather\r\n     * @author Adam Timberlake\r\n     * @link https://github.com/Wildhoney/L.Pather\r\n     */\r\n    L.Pather = L.FeatureGroup.extend({\r\n\r\n        /**\r\n         * @method initialize\r\n         * @param {Object} [options={}]\r\n         * @return {void}\r\n         */\r\n        initialize: function initialize(options) {\r\n\r\n            this.options       = Object.assign(this.defaultOptions(), options || {});\r\n            this.creating      = false;\r\n            this.polylines     = [];\r\n            this.eventHandlers = [];\r\n\r\n        },\r\n\r\n        /**\r\n         * @method createPath\r\n         * @param {L.LatLng[]} latLngs\r\n         * @return {L.Pather.Polyline|Boolean}\r\n         */\r\n        createPath: function createPath(latLngs, notFireEvent, options) {\r\n        \toptions = options || {};\r\n        \t\r\n            if (latLngs.length <= 1) {\r\n                return false;\r\n            }\r\n\r\n            this.clearAll();\r\n\r\n            var polyline = new L.Pather.Polyline(this.map, latLngs, L.extend({}, this.options, options), {\r\n                fire: this.fire.bind(this),\r\n                mode: this.getMode.bind(this),\r\n                remove: this.removePath.bind(this)\r\n            });\r\n\r\n            this.polylines.push(polyline);\r\n            \r\n            if (!notFireEvent) {\r\n            \tthis.fire('created', {\r\n                    polyline: polyline,\r\n                    latLngs: polyline.getLatLngs()\r\n                });\r\n            }\r\n            \r\n\r\n            return polyline;\r\n\r\n        },\r\n\r\n        /**\r\n         * @method removePath\r\n         * @param {L.Pather.Polyline} model\r\n         * @return {Boolean}\r\n         */\r\n        removePath: function removePath(model) {\r\n\r\n            if (model instanceof L.Pather.Polyline) {\r\n\r\n                var indexOf = this.polylines.indexOf(model);\r\n                this.polylines.splice(indexOf, 1);\r\n\r\n                model.softRemove();\r\n\r\n                this.fire('deleted', {\r\n                    polyline: model,\r\n                    latLngs: []\r\n                });\r\n\r\n                return true;\r\n\r\n            }\r\n\r\n            return false;\r\n\r\n        },\r\n        \r\n        removeAllPaths: function removeAllPaths() {\r\n        \tfor(var i = this.polylines.length - 1; i >= 0; i--) {\r\n        \t\tthis.removePath(this.polylines[i]);\r\n        \t}\r\n        },\r\n        \r\n        removeBeforPath: function removeAllPaths() {\r\n    \t\tthis.removePath(this.polylines[0]);\r\n        },\r\n\r\n        /**\r\n         * @method getPaths\r\n         * @return {Array}\r\n         */\r\n        getPaths: function getPolylines() {\r\n            return this.polylines;\r\n        },\r\n\r\n        /**\r\n         * @method onAdd\r\n         * @param {L.Map} map\r\n         * @return {void}\r\n         */\r\n        onAdd: function onAdd(map) {\r\n\r\n            var element        = this.element = this.options.element || map.getContainer();\r\n            this.draggingState = map.dragging._enabled;\r\n            this.map           = map;\r\n            this.fromPoint     = { x: 0, y: 0 };\r\n            this.svg           = d3.select(element)\r\n                                   .append('svg')\r\n                                       .attr('pointer-events', 'none')\r\n                                       .attr('class', this.getOption('moduleClass'))\r\n                                       .attr('width', this.getOption('width'))\r\n                                       .attr('height', this.getOption('height'));\r\n\r\n            map.dragging.disable();\r\n\r\n            // Attach the mouse events for drawing the polyline.\r\n            this.attachEvents(map);\r\n            this.setMode(this.options.mode);\r\n\r\n        },\r\n        \r\n\r\n        /**\r\n         * @method onRemove\r\n         * @return {void}\r\n         */\r\n        onRemove: function onRemove() {\r\n\r\n            this.svg.remove();\r\n\r\n            if (this.options.removePolylines) {\r\n\r\n                var length = this.polylines.length;\r\n\r\n                while (length--) {\r\n                    this.removePath(this.polylines[length]);\r\n                }\r\n\r\n            }\r\n\r\n            this.map.off('mousedown', this.eventHandlers.mouseDown);\r\n            this.map.off('mousemove', this.eventHandlers.mouseMove);\r\n            this.map.off('mouseup',   this.eventHandlers.mouseUp);\r\n            this.map.getContainer().removeEventListener('mouseleave', this.eventHandlers.mouseLeave);\r\n\r\n            this.element.classList.remove('mode-create');\r\n            this.element.classList.remove('mode-delete');\r\n            this.element.classList.remove('mode-edit');\r\n            this.element.classList.remove('mode-append');\r\n\r\n            var tileLayer     = this.map.getContainer().querySelector('.leaflet-tile-pane'),\r\n                originalState = this.draggingState ? 'enable' : 'disable';\r\n            tileLayer.style.pointerEvents = 'all';\r\n            this.map.dragging[originalState]();\r\n\r\n        },\r\n\r\n        /**\r\n         * @method getEvent\r\n         * @param {Object} event\r\n         * @return {Object}\r\n         */\r\n        getEvent: function getEvent(event) {\r\n\r\n            if (event.touches) {\r\n                return event.touches[0];\r\n            }\r\n\r\n            return event;\r\n\r\n        },\r\n\r\n        /**\r\n         * @method edgeBeingChanged\r\n         * @return {Array}\r\n         */\r\n        edgeBeingChanged: function edgeBeingChanged() {\r\n\r\n            var edges = this.polylines.filter(function filter(polyline) {\r\n                return polyline.manipulating;\r\n            });\r\n\r\n            return edges.length === 0 ? null : edges[0];\r\n\r\n        },\r\n\r\n        /**\r\n         * @method isPolylineCreatable\r\n         * @return {Boolean}\r\n         */\r\n        isPolylineCreatable: function isPolylineCreatable() {\r\n            return !!(this.options.mode & MODES.CREATE);\r\n        },\r\n\r\n        /**\r\n         * @property events\r\n         * @type {Object}\r\n         */\r\n        events: {\r\n\r\n            /**\r\n             * @method mouseDown\r\n             * @param {Object} event\r\n             */\r\n            mouseDown: function mouseDown(event) {\r\n\r\n                event = event.originalEvent || this.getEvent(event);\r\n\r\n                var point  = this.map.mouseEventToContainerPoint(event),\r\n                    latLng = this.map.containerPointToLatLng(point);\r\n\r\n                if (this.isPolylineCreatable() && !this.edgeBeingChanged()) {\r\n\r\n                    this.creating  = true;\r\n                    this.fromPoint = this.map.latLngToContainerPoint(latLng);\r\n                    this.latLngs   = [];\r\n\r\n                }\r\n\r\n            },\r\n\r\n            /**\r\n             * @method mouseMove\r\n             * @param {Object} event\r\n             * @return {void}\r\n             */\r\n            mouseMove: function mouseMove(event) {\r\n                event     = event.originalEvent || this.getEvent(event);\r\n                var point = this.map.mouseEventToContainerPoint(event);\r\n\r\n                if (this.edgeBeingChanged()) {\r\n                    this.edgeBeingChanged().moveTo(this.map.containerPointToLayerPoint(point));\r\n                    return;\r\n                }\r\n\r\n                // var lineFunction = d3.svg.line()\r\n                //     .x(function x(d) { return d.x; })\r\n                //     .y(function y(d) { return d.y; })\r\n                    var lineFunction = d3.line()\r\n                    .x(function x(d) { return d.x; })\r\n                    .y(function y(d) { return d.y; })\r\n                    .curve(d3.curveLinear);\r\n//                     // .interpolate('linear');\r\n                 \r\n\r\n                if (this.creating) {\r\n                \tif (this.options.shape == 'line') {\r\n                \t\tvar lineData = [this.fromPoint, new L.Point(point.x, point.y, false)];\r\n                \t\t\r\n                \t\tthis.svg.text('');\r\n                \t\t\r\n                \t\tthis.svg.append('path')\r\n                        .classed(this.getOption('lineClass'), true)\r\n                        .attr('d', lineFunction(lineData))\r\n                        .attr('stroke', this.getOption('strokeColour'))\r\n                        .attr('stroke-width', this.getOption('strokeWidth'))\r\n                        .attr('fill', 'none');\r\n                \t\t\r\n                \t\tif (this.latLngs.length < 2) {\r\n                \t\t\tthis.latLngs.push(point);\r\n                \t\t} else {\r\n                \t\t\tthis.latLngs[1] = point;\r\n                \t\t}\r\n                \t\t\r\n                    }  else if (this.options.shape == 'rect') {\r\n                \t\tvar lineData = [this.fromPoint, new L.Point(point.x, this.fromPoint.y), point, new L.Point(this.fromPoint.x, point.y), this.fromPoint];\r\n\r\n                \t\tthis.svg.text('');\r\n\r\n                \t\tthis.svg.append('path')\r\n                        .classed(this.getOption('lineClass'), true)\r\n                        .attr('d', lineFunction(lineData))\r\n                        .attr('stroke', this.getOption('strokeColour'))\r\n                        .attr('stroke-width', this.getOption('strokeWidth'))\r\n                        .attr('fill', 'none');\r\n\r\n                \t\tif (this.latLngs.length < 2) {\r\n                \t\t\tthis.latLngs.push(this.fromPoint);\r\n                \t\t} else {\r\n                \t\t\tthis.latLngs[1] = new L.Point(point.x, this.fromPoint.y);\r\n                \t\t\tthis.latLngs[2] = point;\r\n                \t\t\tthis.latLngs[3] = new L.Point(this.fromPoint.x, point.y);\r\n                \t\t\tthis.latLngs[4] = this.fromPoint;\r\n                \t\t}\r\n\r\n                    } else if (this.options.shape == 'circle') {\r\n                \t\tvar lineData = [this.fromPoint, new L.Point(point.x, point.y, false)];\r\n                \t\t\r\n                \t\tvar dx = point.x - this.fromPoint.x;\r\n                \t\tvar dy = point.y - this.fromPoint.y;\r\n                \t\tvar r = Math.sqrt(dx * dx + dy * dy);\r\n                \t\t\r\n                \t\tthis.svg.text('');\r\n                \t\t\r\n                \t\tthis.svg.append('circle')\r\n                        .classed(this.getOption('lineClass'), true)\r\n                        .attr('cx', this.fromPoint.x)\r\n                        .attr('cy', this.fromPoint.y)\r\n                        .attr('r', r)\r\n                        .attr('stroke', this.getOption('strokeColour'))\r\n                        .attr('stroke-width', this.getOption('strokeWidth'))\r\n                        .attr('fill', 'none');\r\n                \t\t\r\n                \t\tif (this.latLngs.length < 2) {\r\n                \t\t\tthis.latLngs.push(point);\r\n                \t\t} else {\r\n                \t\t\tthis.latLngs[1] = point;\r\n                \t\t}\r\n                \t\t\r\n                    } else if (this.options.shape == 'dot') {\r\n                \t\tvar lineData = [this.fromPoint, new L.Point(this.fromPoint.x, this.fromPoint.y, false)];\r\n                \t\t\r\n                \t\tvar r = 20;\r\n                \t\t\r\n                \t\tthis.svg.text('');\r\n                \t\t\r\n                \t\tthis.svg.append('circle')\r\n                        .classed(this.getOption('lineClass'), true)\r\n                        .attr('cx', this.fromPoint.x)\r\n                        .attr('cy', this.fromPoint.y)\r\n                        .attr('r', r)\r\n                        .attr('stroke', this.getOption('strokeColour'))\r\n                        .attr('stroke-width', this.getOption('strokeWidth'))\r\n                        .attr('fill', 'none');\r\n                \t\t\r\n                \t\tif (this.latLngs.length < 2) {\r\n                \t\t\tthis.latLngs.push(this.fromPoint);\r\n                \t\t} else {\r\n                \t\t\tthis.latLngs[1] = this.fromPoint;\r\n                \t\t}\r\n                \t\t\r\n                    } else if (this.options.shape == 'polyline' || this.options.shape == 'polygon') {\r\n\t                    var lineData = [this.fromPoint, new L.Point(point.x, point.y, false)];\r\n\t                    this.latLngs.push(point);\r\n\t\r\n\t                    this.svg.append('path')\r\n\t                        .classed(this.getOption('lineClass'), true)\r\n\t                        .attr('d', lineFunction(lineData))\r\n\t                        .attr('stroke', this.getOption('strokeColour'))\r\n\t                        .attr('stroke-width', this.getOption('strokeWidth'))\r\n\t                        .attr('fill', 'none');\r\n\t\r\n\t                    this.fromPoint = { x: point.x, y: point.y };\r\n                    }\r\n\r\n                }\r\n\r\n            },\r\n\r\n            /**\r\n             * @method mouseLeave\r\n             * @return {void}\r\n             */\r\n            mouseLeave: function mouseLeave() {\r\n//                this.clearAll();\r\n//                this.creating = false;\r\n            },\r\n\r\n            /**\r\n             * @method mouseUp\r\n             * @return {void}\r\n             */\r\n            mouseUp: function mouseup() {\r\n                console.log(this)\r\n                if (this.creating) {\r\n\r\n                    this.creating = false;\r\n                    \r\n                    if (this.options.shape == 'polygon') {\r\n                    \tthis.latLngs.push(this.latLngs[0]);\r\n                    }\r\n                    \r\n                    this.createPath(this.convertPointsToLatLngs(this.latLngs));\r\n                    this.latLngs  = [];\r\n                    return;\r\n\r\n                }\r\n\r\n                if (this.edgeBeingChanged()) {\r\n                    this.edgeBeingChanged().attachElbows();\r\n                    this.edgeBeingChanged().finished();\r\n                    this.edgeBeingChanged().manipulating = false;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * @method attachEvents\r\n         * @param {L.Map} map\r\n         * @return {void}\r\n         */\r\n        attachEvents: function attachEvents(map) {\r\n\r\n            this.eventHandlers = {\r\n                mouseDown:  this.events.mouseDown.bind(this),\r\n                mouseMove:  this.events.mouseMove.bind(this),\r\n                mouseUp:    this.events.mouseUp.bind(this),\r\n                mouseLeave: this.events.mouseLeave.bind(this)\r\n            };\r\n\r\n            this.map.on('mousedown', this.eventHandlers.mouseDown);\r\n            this.map.on('mousemove', this.eventHandlers.mouseMove);\r\n            this.map.on('mouseup', this.eventHandlers.mouseUp);\r\n            this.map.getContainer().addEventListener('mouseleave', this.eventHandlers.mouseLeave);\r\n\r\n            // Attach the mobile events that delegate to the desktop events.\r\n            this.map.getContainer().addEventListener('touchstart', this.fire.bind(map, 'mousedown'));\r\n            this.map.getContainer().addEventListener('touchmove', this.fire.bind(map, 'mousemove'));\r\n            this.map.getContainer().addEventListener('touchend', this.fire.bind(map, 'mouseup'));\r\n\r\n        },\r\n\r\n        /**\r\n         * @method convertPointsToLatLngs\r\n         * @param {Point[]} points\r\n         * @return {LatLng[]}\r\n         */\r\n        convertPointsToLatLngs: function convertPointsToLatLngs(points) {\r\n\r\n            return points.map(function map(point) {\r\n                return this.map.containerPointToLatLng(point);\r\n            }.bind(this));\r\n\r\n        },\r\n\r\n        /**\r\n         * @method clearAll\r\n         * @return {void}\r\n         */\r\n        clearAll: function clearAll() {\r\n            this.svg.text('');\r\n        },\r\n\r\n        /**\r\n         * @method getOption\r\n         * @param {String} property\r\n         * @return {String|Number}\r\n         */\r\n        getOption: function getOption(property) {\r\n            return this.options[property] || this.defaultOptions()[property];\r\n        },\r\n\r\n        /**\r\n         * @method defaultOptions\r\n         * @return {Object}\r\n         */\r\n        defaultOptions: function defaultOptions() {\r\n\r\n            return {\r\n                moduleClass: 'pather',\r\n                lineClass: 'drawing-line',\r\n                detectTouch: true,\r\n                elbowClass: 'elbow',\r\n                removePolylines: true,\r\n                strokeColour: 'rgba(0,0,0,.5)',\r\n                strokeWidth: 2,\r\n                width: '100%',\r\n                height: '100%',\r\n                smoothFactor: 10,\r\n                pathColour: 'black',\r\n                pathOpacity: 0.55,\r\n                fillOpacity: 0.45,\r\n                pathWidth: 3,\r\n                mode: MODES.ALL,\r\n                shape: 'polygon'\r\n            };\r\n\r\n        },\r\n        \r\n        setShape: function setShape(shape) {\r\n        \tthis.options.shape = shape;\r\n        },\r\n        \r\n        getShape: function getShape() {\r\n        \treturn this.options.shape;\r\n        },\r\n\r\n        /**\r\n         * @method setSmoothFactor\r\n         * @param {Number} smoothFactor\r\n         * @return {void}\r\n         */\r\n        setSmoothFactor: function setSmoothFactor(smoothFactor) {\r\n            this.options.smoothFactor = parseInt(smoothFactor);\r\n        },\r\n\r\n        /**\r\n         * @method setMode\r\n         * @param {Number} mode\r\n         * @return {void}\r\n         */\r\n        setMode: function setMode(mode) {\r\n\r\n            this.setClassName(mode);\r\n            this.options.mode = mode;\r\n\r\n            var tileLayer = this.map.getContainer().querySelector('.leaflet-tile-pane');\r\n\r\n            /**\r\n             * @method shouldDisableDrag\r\n             * @return {Boolean}\r\n             * @see http://www.stucox.com/blog/you-cant-detect-a-touchscreen/\r\n             */\r\n            var shouldDisableDrag = function shouldDisableDrag() {\r\n\r\n                if (this.detectTouch && ('ontouchstart' in $window || 'onmsgesturechange' in $window)) {\r\n                    return (this.options.mode & MODES.CREATE || this.options.mode & MODES.EDIT);\r\n                }\r\n\r\n                return (this.options.mode & MODES.CREATE);\r\n\r\n            }.bind(this);\r\n\r\n            if (shouldDisableDrag()) {\r\n\r\n                var originalState = this.draggingState ? 'disable' : 'enable';\r\n                tileLayer.style.pointerEvents = 'none';\r\n                return void this.map.dragging[originalState]();\r\n\r\n            }\r\n\r\n            tileLayer.style.pointerEvents = 'all';\r\n            this.map.dragging.enable();\r\n\r\n        },\r\n\r\n        /**\r\n         * @method setClassName\r\n         * @param {Number} mode\r\n         * @return {void}\r\n         */\r\n        setClassName: function setClassName(mode) {\r\n\r\n            /**\r\n             * @method conditionallyAppendClassName\r\n             * @param {String} modeName\r\n             * @return {void}\r\n             */\r\n            var conditionallyAppendClassName = function conditionallyAppendClassName(modeName) {\r\n\r\n                var className = ['mode', modeName].join('-');\r\n\r\n                if (MODES[modeName.toUpperCase()] & mode) {\r\n                    return void this.element.classList.add(className);\r\n                }\r\n\r\n                this.element.classList.remove(className);\r\n\r\n            }.bind(this);\r\n\r\n            conditionallyAppendClassName('create');\r\n            conditionallyAppendClassName('delete');\r\n            conditionallyAppendClassName('edit');\r\n            conditionallyAppendClassName('append');\r\n        },\r\n\r\n        /**\r\n         * @method getMode\r\n         * @return {Number}\r\n         */\r\n        getMode: function getMode() {\r\n            return this.options.mode;\r\n        },\r\n\r\n        /**\r\n         * @method setOptions\r\n         * @param {Object} options\r\n         * @return {void}\r\n         */\r\n        setOptions: function setOptions(options) {\r\n            this.options = Object.assign(this.options, options || {});\r\n        }\r\n\r\n    });\r\n\r\n    /**\r\n     * @constant L.Pather.MODE\r\n     * @type {Object}\r\n     */\r\n    L.Pather.MODE = MODES;\r\n\r\n    // Simple factory that Leaflet loves to bundle.\r\n    L.pather = function pather(options) {\r\n        return new L.Pather(options);\r\n    };\r\n\r\n})(window);\r\n(function main() {\r\n\r\n    \"use strict\";\r\n\r\n    /* jshint ignore:start */\r\n\r\n    if (!Object.assign) {\r\n        Object.defineProperty(Object, 'assign', {\r\n            enumerable: false,\r\n            configurable: true,\r\n            writable: true,\r\n            value: function(target, firstSource) {\r\n                'use strict';\r\n                if (target === undefined || target === null) {\r\n                    throw new TypeError('Cannot convert first argument to object');\r\n                }\r\n\r\n                var to = Object(target);\r\n                for (var i = 1; i < arguments.length; i++) {\r\n                    var nextSource = arguments[i];\r\n                    if (nextSource === undefined || nextSource === null) {\r\n                        continue;\r\n                    }\r\n                    nextSource = Object(nextSource);\r\n\r\n                    var keysArray = Object.keys(Object(nextSource));\r\n                    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\r\n                        var nextKey = keysArray[nextIndex];\r\n                        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\r\n                        if (desc !== undefined && desc.enumerable) {\r\n                            to[nextKey] = nextSource[nextKey];\r\n                        }\r\n                    }\r\n                }\r\n                return to;\r\n            }\r\n        });\r\n    }\r\n\r\n    /* jshint ignore:end */\r\n\r\n})();\r\n(function main() {\r\n\r\n    \"use strict\";\r\n\r\n    /**\r\n     * @constant DATA_ATTRIBUTE\r\n     * @type {String|Symbol}\r\n     */\r\n    var DATA_ATTRIBUTE = typeof Symbol === 'undefined' ? '_pather' : Symbol.for('pather');\r\n\r\n    /**\r\n     * @module Pather\r\n     * @submodule Polyline\r\n     * @param {L.Map} map\r\n     * @param {L.LatLng[]} latLngs\r\n     * @param {Object} [options={}]\r\n     * @param {Object} methods\r\n     * @return {Polyline}\r\n     * @constructor\r\n     */\r\n    L.Pather.Polyline = function Polyline(map, latLngs, options, methods) {\r\n\r\n        this.options = {\r\n            color:        options.pathColour,\r\n            opacity:      options.pathOpacity,\r\n            weight:       options.pathWidth,\r\n            smoothFactor: options.smoothFactor || 1,\r\n            elbowClass:   options.elbowClass,\r\n            shape: options.shape\r\n        };\r\n\r\n        if (options.shape === 'polygon') {\r\n        \tthis.polyline = new L.Polygon(latLngs, L.extend({}, this.options, options)).addTo(map);\r\n        } else if (options.shape === 'rect') {\r\n        \tthis.polyline = new L.Polygon(latLngs, L.extend({}, this.options, options)).addTo(map);\r\n        } else if (options.shape === 'circle') {\r\n        \tif (latLngs.length !== 2) {\r\n        \t\tthrow new Error('Circle shapre point does not equeal to 2')\r\n        \t}\r\n        \t\r\n        \tvar center = latLngs[0];\r\n        \r\n        \tvar r = latLngs[0].distanceTo(latLngs[1]);\r\n        \t\r\n        \tthis.polyline = new L.Circle(center, r, L.extend({}, this.options, options)).addTo(map);\r\n        } else if (options.shape === 'dot') {\r\n        \tif (latLngs.length !== 2) {\r\n        \t\tthrow new Error('Dot point does not equeal to 2')\r\n        \t}\r\n        \t\r\n        \tvar center = latLngs[0];\r\n        \r\n        \tvar r = 20;\r\n        \t\r\n        \tthis.polyline = new L.Circle(center, r, L.extend({}, this.options, options)).addTo(map);\r\n        } else if (options.shape === 'polyline' || options.shape === 'line') {\r\n        \tthis.polyline = new L.Polyline(latLngs, L.extend({}, this.options, options)).addTo(map)\r\n        }\r\n        \r\n        this.map          = map;\r\n        this.methods      = methods;\r\n        this.edges        = [];\r\n        this.manipulating = false;\r\n\r\n        this.attachPolylineEvents(this.polyline);\r\n        this.select();\r\n\r\n    };\r\n\r\n    /**\r\n     * @property prototype\r\n     * @type {Object}\r\n     */\r\n    L.Pather.Polyline.prototype = {\r\n\r\n        /**\r\n         * @method select\r\n         * @return {void}\r\n         */\r\n        select: function select() {\r\n            this.attachElbows();\r\n        },\r\n\r\n        /**\r\n         * @method deselect\r\n         * @return {void}\r\n         */\r\n        deselect: function deselect() {\r\n            this.manipulating = false;\r\n        },\r\n\r\n        /**\r\n         * @method attachElbows\r\n         * @return {void}\r\n         */\r\n        attachElbows: function attachElbows() {\r\n\r\n            this.detachElbows();\r\n\r\n            if (this.polyline._parts) {\r\n\t            this.polyline._parts[0].forEach(function forEach(point) {\r\n\t\r\n\t                var divIcon = new L.DivIcon({ className: this.options.elbowClass }),\r\n\t                    latLng  = this.map.layerPointToLatLng(point),\r\n\t                    edge    = new L.Marker(latLng, { icon: divIcon }).addTo(this.map);\r\n\t\r\n\t                edge[DATA_ATTRIBUTE] = { point: point };\r\n\t                this.attachElbowEvents(edge);\r\n\t                this.edges.push(edge);\r\n\t\r\n\t            }.bind(this));\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * @method detachElbows\r\n         * @return {void}\r\n         */\r\n        detachElbows: function detachElbows() {\r\n\r\n            this.edges.forEach(function forEach(edge) {\r\n                this.map.removeLayer(edge);\r\n            }.bind(this));\r\n\r\n            this.edges.length = 0;\r\n\r\n        },\r\n\r\n        /**\r\n         * @method attachPolylineEvents\r\n         * @param {L.Polyline} polyline\r\n         * @return {void}\r\n         */\r\n        attachPolylineEvents: function attachPathEvent(polyline) {\r\n\r\n            polyline.on('click', function click(event) {\r\n            \t\r\n                event.originalEvent.stopPropagation();\r\n                event.originalEvent.preventDefault();\r\n\r\n                if (this.methods.mode() & L.Pather.MODE.APPEND) {\r\n\r\n                    // Appending takes precedence over deletion!\r\n                    var latLng = this.map.mouseEventToLatLng(event.originalEvent);\r\n                    this.insertElbow(latLng);\r\n\r\n                } else if (this.methods.mode() & L.Pather.MODE.DELETE) {\r\n                    this.methods.remove(this);\r\n                }\r\n\r\n            }.bind(this));\r\n            \r\n            polyline.on('mousemove', function(event) {\r\n                if (this.methods.mode() & L.Pather.MODE.DELETE) {\r\n                \tthis.polyline.setStyle({'fillOpacity': 1});\r\n                \t\r\n                }\r\n            }.bind(this));\r\n            \r\n            polyline.on('mouseout', function(event) {\r\n                if (this.methods.mode() & L.Pather.MODE.DELETE) {\r\n                \tthis.polyline.setStyle({'fillOpacity': 0.45});\r\n                }\r\n            }.bind(this));\r\n\r\n        },\r\n\r\n        /**\r\n         * @method attachElbowEvents\r\n         * @param {L.Marker} marker\r\n         * @return {void}\r\n         */\r\n        attachElbowEvents: function attachElbowEvents(marker) {\r\n        \tvar self = this;\r\n            marker.on('mousedown', function mousedown(event) {\r\n            \tself.map.dragging.disable();\r\n            \t\r\n                event = event.originalEvent || event;\r\n\r\n                if (this.methods.mode() & L.Pather.MODE.EDIT) {\r\n\r\n                    if (event.stopPropagation) {\r\n                        event.stopPropagation();\r\n                        event.preventDefault();\r\n                    }\r\n\r\n                    this.manipulating = marker;\r\n\r\n                }\r\n\r\n            }.bind(this));\r\n\r\n            marker.on('mouseup', function mouseup(event) {\r\n            \tself.map.dragging.enable();\r\n            \t\r\n                event = event.originalEvent || event;\r\n\r\n                if (event.stopPropagation) {\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n\r\n                this.manipulating = false;\r\n\r\n            });\r\n\r\n            // Attach the mobile events to delegate to the desktop equivalent events.\r\n            marker._icon.addEventListener('touchstart', marker.fire.bind(marker, 'mousedown'));\r\n            marker._icon.addEventListener('touchend', marker.fire.bind(marker, 'mouseup'));\r\n\r\n        },\r\n\r\n        /**\r\n         * @method insertElbow\r\n         * @param {L.LatLng} latLng\r\n         * @return {void}\r\n         */\r\n        insertElbow: function insertElbow(latLng) {\r\n\r\n            var newPoint      = this.map.latLngToLayerPoint(latLng),\r\n                leastDistance = Infinity,\r\n                insertAt      = -1,\r\n                points        = this.polyline._parts[0];\r\n\r\n            points.forEach(function forEach(currentPoint, index) {\r\n\r\n                var nextPoint = points[index + 1] || points[0],\r\n                    distance  = L.LineUtil.pointToSegmentDistance(newPoint, currentPoint, nextPoint);\r\n\r\n                if (distance < leastDistance) {\r\n                    leastDistance = distance;\r\n                    insertAt      = index;\r\n                }\r\n\r\n            }.bind(this));\r\n\r\n            points.splice(insertAt + 1, 0, newPoint);\r\n\r\n            var parts = points.map(function map(point) {\r\n                var latLng = this.map.layerPointToLatLng(point);\r\n                return { _latlng: latLng };\r\n            }.bind(this));\r\n\r\n            this.redraw(parts);\r\n            this.attachElbows();\r\n            this.finished();\r\n        },\r\n\r\n        /**\r\n         * @method moveTo\r\n         * @param {L.Point} point\r\n         * @return {void}\r\n         */\r\n        moveTo: function moveTo(point) {\r\n\r\n            var latLng = this.map.layerPointToLatLng(point);\r\n            this.manipulating.setLatLng(latLng);\r\n            this.redraw(this.edges);\r\n\r\n        },\r\n\r\n        /**\r\n         * @method finished\r\n         * @return {void}\r\n         */\r\n        finished: function finished() {\r\n\r\n            this.methods.fire('edited', {\r\n                polyline: this,\r\n                latLngs: this.getLatLngs()\r\n            });\r\n\r\n        },\r\n\r\n        /**\r\n         * @method redraw\r\n         * @param {Array} edges\r\n         * @return {void}\r\n         */\r\n        redraw: function redraw(edges) {\r\n\r\n            var latLngs = [],\r\n                options = {};\r\n\r\n            edges.forEach(function forEach(edge) {\r\n                latLngs.push(edge._latlng);\r\n            });\r\n\r\n            Object.keys(this.options).forEach(function forEach(key) {\r\n                options[key] = this.options[key];\r\n            }.bind(this));\r\n\r\n            options.smoothFactor = 0;\r\n\r\n            this.softRemove(false);\r\n            \r\n            if (this.options.shape === 'polygon') {\r\n            \tthis.polyline = new L.Polygon(latLngs, options).addTo(this.map);\r\n            } else if (options.shape === 'rect') {\r\n            \tthis.polyline = new L.Polygon(latLngs, L.extend({}, this.options, options)).addTo(map);\r\n            }  else if (this.options.shape === 'circle') {\r\n            \tif (latLngs.length !== 2) {\r\n            \t\tthrow new Error('Circle shapre point does not equeal to 2')\r\n            \t}\r\n            \t\r\n            \tvar center = latLngs[0];\r\n            \r\n            \tvar r = latLngs[0].distanceTo(latLngs[1]);\r\n            \t\r\n            \tthis.polyline = new L.Circle(center, r, options).addTo(this.map);\r\n            } else if (this.options.shape === 'dot') {\r\n            \tif (latLngs.length !== 2) {\r\n            \t\tthrow new Error('Dot shapre point does not equeal to 2')\r\n            \t}\r\n            \t\r\n            \tvar center = latLngs[0];\r\n            \r\n            \tvar r = 20;\r\n            \t\r\n            \tthis.polyline = new L.Circle(center, r, options).addTo(this.map);\r\n            } else if (this.options.shape === 'polyline' || this.options.shape === 'line') {\r\n            \tthis.polyline = new L.Polyline(latLngs, options).addTo(this.map)\r\n            }\r\n//            this.polyline = this.options.shape === 'polygon' ? new L.Polygon(latLngs, options).addTo(this.map) : new L.Polyline(latLngs, options).addTo(this.map);\r\n            this.attachPolylineEvents(this.polyline);\r\n\r\n        },\r\n\r\n        /**\r\n         * @method softRemove\r\n         * @param {Boolean} [edgesToo=true]\r\n         * @return {void}\r\n         */\r\n        softRemove: function softRemove(edgesToo) {\r\n\r\n            edgesToo = typeof edgesToo === 'undefined' ? true : edgesToo;\r\n\r\n            this.map.removeLayer(this.polyline);\r\n\r\n            if (edgesToo) {\r\n\r\n                this.edges.forEach(function forEach(edge) {\r\n                    this.map.removeLayer(edge);\r\n                }.bind(this));\r\n\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * @method getLatLngs\r\n         * @return {LatLng[]}\r\n         */\r\n        getLatLngs: function getLatLngs() {\r\n        \t\r\n        \tif (this.polyline._parts) {\r\n\r\n\t            return this.polyline._parts[0].map(function map(part) {\r\n\t                return this.map.layerPointToLatLng(part);\r\n\t            }.bind(this));\r\n        \t} else if (this.polyline._mRadius) {\r\n        \t\treturn [this.polyline.getBounds().getNorthWest(), this.polyline.getBounds().getSouthEast()];\r\n        \t}\r\n\r\n        }\r\n        \r\n    };\r\n\r\n})();"]}]}