{"remainingRequest":"D:\\program\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\program\\frontend\\src\\views\\shortimpending\\short-time\\ShortTime.js?vue&type=script&lang=js&","dependencies":[{"path":"D:\\program\\frontend\\src\\views\\shortimpending\\short-time\\ShortTime.js","mtime":1553855602428},{"path":"D:\\program\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\program\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport _slicedToArray from \"D:\\\\program\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.find\";\nimport _objectSpread from \"D:\\\\program\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport * as moment from \"moment\";\nimport * as axios from \"axios\";\nimport { ClassifyTitle, SectionTitle } from \"../common\";\nimport { TimeSelect } from \"../../../components/share\";\nimport datas from \"./datas\";\nexport default {\n  name: \"short-time\",\n  components: {\n    ClassifyTitle: ClassifyTitle,\n    SectionTitle: SectionTitle,\n    TimeSelect: TimeSelect\n  },\n  data: function data() {\n    return _objectSpread({}, datas, {\n      cancelRequests: [],\n      isModeProduct: true\n    });\n  },\n  computed: {},\n  mounted: function mounted() {\n    this.getFcstServeTimes();\n    this.getElementTimes();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.cancelAllRequest();\n  },\n  methods: {\n    // 要素或时间改变时\n    onChange: function onChange() {\n      var _this = this;\n\n      var productElements = this.products.reduce(function (curr, item) {\n        return curr.concat(item.elements);\n      }, []);\n      var curr = productElements.find(function (el) {\n        return el.name === _this.currActiveElement;\n      });\n      var strTime = \"\";\n      var forecastTime = \"\";\n      var type = \"\";\n      var patterns = null;\n      var dataType = \"\";\n      var classifyId = \"\";\n      var startHourList = null;\n\n      if (curr) {\n        //客观产品要素\n        dataType = \"实况\";\n        classifyId = curr.parentId;\n\n        if (this.isModeProduct) {\n          patterns = this.currModeNavValue === \"多模式\" ? this.modeNavs.map(function (el) {\n            return el.value;\n          }) : [this.currModeNavValue];\n        }\n\n        if (curr.parentId === 'modeProduct') {\n          startHourList = this.modeNavs.find(function (el) {\n            return el.value === _this.currModeNavValue;\n          }).startHourList;\n        } else {\n          startHourList = curr.startHourList;\n        }\n\n        type = \"objectives\";\n\n        if (this.fcstDate) {\n          strTime = this.fcstDate.clone().startOf(\"day\").add(+this.fcstHour, \"hours\").format(\"YYYY-MM-DD HH:mm:ss\");\n        } // forecastTime = this.actDate\n        //   .clone()\n        //   .startOf(\"day\")\n        //   .add(+this.actHour, \"hours\")\n        //   .format(\"YYYY-MM-DD HH:mm:ss\");\n\n      } else {\n        //中分析产品(自动站客观分析)要素\n        type = \"relation\";\n        forecastTime = strTime = this.centerDate.clone().startOf(\"day\").add(+this.centerHour, \"hours\").add(+this.centerMinute, \"minutes\").format(\"YYYY-MM-DD HH:mm:ss\");\n      }\n\n      this.$emit(\"change\", {\n        type: type,\n        isConcat: this.isConcat,\n        strTime: strTime,\n        startHourList: startHourList,\n        forecastTime: forecastTime,\n        eleName: this.currActiveElement,\n        patterns: patterns,\n        dataType: dataType,\n        classifyId: classifyId\n      });\n    },\n    // 预报服务条件改变时\n    onServeChange: function onServeChange() {\n      var currFcstServe = this.fcstServes.find(function (el) {\n        return el.active;\n      });\n\n      if (currFcstServe) {\n        var strTime = \"\";\n        var startDate = moment(currFcstServe.currDate, \"YYMMDDHHmm\");\n\n        if (startDate.isValid()) {\n          strTime = startDate.format(\"YYYY-MM-DD HH:mm:ss\");\n        }\n\n        var forecastTime = \"\";\n\n        if (currFcstServe.id === \"latent\" && strTime) {\n          forecastTime = startDate.clone().add(+currFcstServe.currHour, \"hours\").format(\"YYYY-MM-DD HH:mm:ss\");\n        } else {\n          forecastTime = strTime;\n        }\n\n        var eleName = \"\";\n\n        if (currFcstServe.id === \"short\") {\n          eleName = currFcstServe.elements.find(function (el) {\n            return el.id === currFcstServe.currElement;\n          }).eleName;\n        } else {\n          eleName = currFcstServe.eleName;\n        }\n\n        this.$emit(\"change\", {\n          type: \"fcstServe\",\n          isHasActive: true,\n          strTime: strTime,\n          forecastTime: forecastTime,\n          eleName: eleName\n        });\n      } else {\n        this.$emit(\"change\", {\n          type: \"fcstServe\",\n          isHasActive: false\n        });\n      }\n    },\n    // 取消或选中或切换预报服务\n    onClickActiveServe: function onClickActiveServe(serve) {\n      serve.active = !serve.active;\n      this.fcstServes.forEach(function (el) {\n        if (el !== serve) {\n          el.active = false;\n        }\n      });\n    },\n    // 点击切换要素(所有)\n    onClickElement: function onClickElement(ele, parentId) {\n      this.isModeProduct = parentId === \"modeProduct\";\n      if (this.currActiveElement === ele.name) return;\n      this.currActiveElement = ele.name;\n      this.setElementTime();\n      this.onChange();\n    },\n    // 切换要素时设置对应要素的时间（只针对客观产品）\n    setElementTime: function setElementTime() {\n      var _this2 = this;\n\n      var productElements = this.products.reduce(function (curr, item) {\n        return curr.concat(item.elements);\n      }, []);\n      var curr = productElements.find(function (el) {\n        return el.name === _this2.currActiveElement;\n      });\n\n      if (curr) {\n        // 客观产品\n        var startDate = '';\n\n        if (curr.parentId === \"modeProduct\") {\n          // 模式产品\n          var currModelNav = this.modeNavs.find(function (el) {\n            return el.value === _this2.currModeNavValue;\n          });\n          this.fcstHourList = currModelNav.startHourList;\n          startDate = currModelNav.currStartDate;\n        } else {\n          this.fcstHourList = curr.startHourList;\n          startDate = curr.currStartDate;\n        }\n\n        if (startDate) {\n          this.fcstDate = moment(startDate, \"YYMMDDHHmm\");\n          this.fcstHour = this.fcstDate.format(\"HH\");\n        } else {\n          this.fcstDate = '';\n          this.fcstHour = this.fcstHourList[0];\n        }\n      }\n    },\n    //多模式切换\n    onClickModeNav: function onClickModeNav(value) {\n      this.currModeNavValue = value;\n      this.setElementTime();\n      this.onChange();\n    },\n    // 得到预报服务时间\n    getFcstServeTimes: function getFcstServeTimes() {\n      var _this3 = this;\n\n      var CancelToken = axios.CancelToken;\n      axios.get(\"/proxy/10.20.67.111/zh/dataNew.json\", {\n        cancelToken: new CancelToken(function (c) {\n          _this3.cancelRequests.push(c);\n        })\n      }).then(function (data) {\n        var timeList = data.data.data;\n\n        _this3.fcstServes.forEach(function (el) {\n          var curr = timeList.find(function (item) {\n            return item.name === el.dataName;\n          });\n\n          if (curr && curr.times.length) {\n            el.startDates = curr.times.slice(0, 30);\n            el.currDate = curr.times[0];\n          }\n        });\n\n        _this3.onServeChange();\n      });\n    },\n    // 得到每个要素的时间\n    getElementTimes: function getElementTimes() {\n      var _this4 = this;\n\n      var CancelToken = axios.CancelToken;\n      axios.get(\"/proxy/10.20.67.111/zh/nowcastdata.json\", {\n        cancelToken: new CancelToken(function (c) {\n          _this4.cancelRequests.push(c);\n        })\n      }).then(function (data) {\n        var timeList = data.data.data;\n\n        _this4.products.forEach(function (product) {\n          product.elements.forEach(function (el) {\n            if (el.parentId === \"modeProduct\") return;\n            var curr = timeList.find(function (item) {\n              return item.name === el.name;\n            });\n\n            if (curr && curr.times.length) {\n              el.currStartDate = curr.times[0];\n            }\n          });\n        }); // 模式产品\n\n\n        _this4.modeNavs.forEach(function (el) {\n          var curr = timeList.find(function (item) {\n            return item.name === el.timeName;\n          });\n\n          if (curr && curr.times.length) {\n            var latestTime = curr.times[0];\n\n            if (el.value === '多模式') {\n              // 多模式取的是Grapes的时间，在这要做特殊处理\n              // console.log(latestTime);\n              var mTime = moment(latestTime, 'YYMMDDHHmm');\n              var mTimeUnix = mTime.unix(); // const hour = mTime.format('HH');\n              // 生成由大到小的时间列表\n\n              var unixList = [el.startHourList, el.startHourList].reduce(function (curr, item, i) {\n                var date = mTime.clone().startOf('day').subtract(i, 'days');\n                var list = item.slice().reverse();\n                curr = curr.concat(list.map(function (h) {\n                  return date.clone().add(+h, 'hours').unix();\n                }));\n                return curr;\n              }, []);\n              var currStartDate = unixList.find(function (u) {\n                return mTimeUnix >= u;\n              });\n\n              if (currStartDate) {\n                el.currStartDate = moment.unix(currStartDate).format('YYMMDDHHmm');\n              } // console.log(el.currStartDate);\n              // if(el.startHourList.includes(hour)) {\n              //   el.currStartDate = latestTime;\n              // }else if (hour > 20) {\n              //   el.currStartDate = mTime.clone().startOf('day').add(20, 'hours').format('YYMMDDHHmm');\n              // }else if (hour < 20) {\n              //   el.currStartDate = mTime.clone().startOf('day').add(8, 'hours').format('YYMMDDHHmm');\n              // }else if (hour < 8) {\n              //   el.currStartDate = mTime.clone().startOf('day').subtract(1, 'days').add(20, 'hours').format('YYMMDDHHmm');\n              // }\n\n            } else {\n              el.currStartDate = latestTime;\n            }\n          }\n        });\n\n        _this4.setElementTime();\n\n        _this4.onChange();\n      }); // 以一个要素的最新时间代替请求中分析产品(自动站客观分析)中所有要素的最新时间\n\n      var body = {\n        modeName: \"qiangtianqi\",\n        eleName: \"OBSanaly:FenXizidongzhanHB:华北:海平面气压、温度、风场\",\n        strTime: \"\",\n        forecastTime: \"\",\n        level: \"\",\n        userDefinedParas: \"\",\n        symbol: 1\n      };\n      var params = new URLSearchParams();\n\n      for (var key in body) {\n        params.append(key, body[key]);\n      }\n\n      axios.post(\"/proxy/10.20.67.111/PictureInfoForgetFilePath.action\", params, {\n        cancelToken: new CancelToken(function (c) {\n          _this4.cancelRequests.push(c);\n        })\n      }).then(function (data) {\n        if (!data.data.path) return; // [模式名字 要素名字  发布时间  预报时间 层次  文件路径]\n\n        var _data$data$path$split = data.data.path.split(\",\"),\n            _data$data$path$split2 = _slicedToArray(_data$data$path$split, 6),\n            patternName = _data$data$path$split2[0],\n            eleName = _data$data$path$split2[1],\n            startTime = _data$data$path$split2[2],\n            fcstTime = _data$data$path$split2[3],\n            level = _data$data$path$split2[4],\n            filePath = _data$data$path$split2[5];\n\n        var latestTime = moment(startTime, \"YYYY-MM-DD HH:mm:ss\");\n        _this4.centerDate = latestTime;\n        _this4.centerHour = latestTime.format(\"HH\");\n        _this4.centerMinute = latestTime.format(\"mm\");\n      });\n    },\n    // 取消所有请求\n    cancelAllRequest: function cancelAllRequest() {\n      this.cancelRequests.forEach(function (el) {\n        return el();\n      });\n      this.cancelRequests = [];\n    }\n  }\n};",{"version":3,"sources":["D:\\program\\frontend\\src\\views\\shortimpending\\short-time\\ShortTime.js"],"names":["moment","axios","ClassifyTitle","SectionTitle","TimeSelect","datas","name","components","data","cancelRequests","isModeProduct","computed","mounted","getFcstServeTimes","getElementTimes","beforeDestroy","cancelAllRequest","methods","onChange","productElements","products","reduce","curr","item","concat","elements","find","el","currActiveElement","strTime","forecastTime","type","patterns","dataType","classifyId","startHourList","parentId","currModeNavValue","modeNavs","map","value","fcstDate","clone","startOf","add","fcstHour","format","centerDate","centerHour","centerMinute","$emit","isConcat","eleName","onServeChange","currFcstServe","fcstServes","active","startDate","currDate","isValid","id","currHour","currElement","isHasActive","onClickActiveServe","serve","forEach","onClickElement","ele","setElementTime","currModelNav","fcstHourList","currStartDate","onClickModeNav","CancelToken","get","cancelToken","c","push","then","timeList","dataName","times","length","startDates","slice","product","timeName","latestTime","mTime","mTimeUnix","unix","unixList","i","date","subtract","list","reverse","h","u","body","modeName","level","userDefinedParas","symbol","params","URLSearchParams","key","append","post","path","split","patternName","startTime","fcstTime","filePath"],"mappings":"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","sourcesContent":["import * as moment from \"moment\";\r\nimport * as axios from \"axios\";\r\nimport { ClassifyTitle, SectionTitle } from \"../common\";\r\nimport { TimeSelect } from \"../../../components/share\";\r\nimport datas from \"./datas\";\r\n\r\nexport default {\r\n  name: \"short-time\",\r\n  components: { ClassifyTitle, SectionTitle, TimeSelect },\r\n  data() {\r\n    return {\r\n      ...datas,\r\n      cancelRequests: [],\r\n      isModeProduct: true\r\n    };\r\n  },\r\n  computed: {},\r\n\r\n  mounted() {\r\n    this.getFcstServeTimes();\r\n    this.getElementTimes();\r\n  },\r\n\r\n  beforeDestroy() {\r\n    this.cancelAllRequest();\r\n  },\r\n\r\n  methods: {\r\n    // 要素或时间改变时\r\n    onChange() {\r\n      const productElements = this.products.reduce(\r\n        (curr, item) => curr.concat(item.elements),\r\n        []\r\n      );\r\n      let curr = productElements.find(el => el.name === this.currActiveElement);\r\n\r\n      let strTime = \"\";\r\n      let forecastTime = \"\";\r\n      let type = \"\";\r\n      let patterns = null;\r\n      let dataType = \"\";\r\n      let classifyId = \"\";\r\n      let startHourList = null;\r\n\r\n\r\n      if (curr) {\r\n        //客观产品要素\r\n        dataType = \"实况\";\r\n        classifyId = curr.parentId;\r\n        if (this.isModeProduct) {\r\n          patterns =\r\n            this.currModeNavValue === \"多模式\"\r\n              ? this.modeNavs.map(el => el.value)\r\n              : [this.currModeNavValue];\r\n        }\r\n\r\n        if (curr.parentId === 'modeProduct') {\r\n          startHourList = this.modeNavs.find(el => el.value === this.currModeNavValue).startHourList;\r\n        }else {\r\n          startHourList = curr.startHourList;\r\n        }\r\n\r\n        type = \"objectives\";\r\n\r\n        if (this.fcstDate) {\r\n          strTime = this.fcstDate\r\n            .clone()\r\n            .startOf(\"day\")\r\n            .add(+this.fcstHour, \"hours\")\r\n            .format(\"YYYY-MM-DD HH:mm:ss\");\r\n        }\r\n        // forecastTime = this.actDate\r\n        //   .clone()\r\n        //   .startOf(\"day\")\r\n        //   .add(+this.actHour, \"hours\")\r\n        //   .format(\"YYYY-MM-DD HH:mm:ss\");\r\n      } else {\r\n        //中分析产品(自动站客观分析)要素\r\n        type = \"relation\";\r\n        forecastTime = strTime = this.centerDate\r\n          .clone()\r\n          .startOf(\"day\")\r\n          .add(+this.centerHour, \"hours\")\r\n          .add(+this.centerMinute, \"minutes\")\r\n          .format(\"YYYY-MM-DD HH:mm:ss\");\r\n      }\r\n\r\n      this.$emit(\"change\", {\r\n        type,\r\n        isConcat: this.isConcat,\r\n        strTime,\r\n        startHourList,\r\n        forecastTime,\r\n        eleName: this.currActiveElement,\r\n        patterns,\r\n        dataType,\r\n        classifyId\r\n      });\r\n    },\r\n\r\n    // 预报服务条件改变时\r\n    onServeChange() {\r\n      const currFcstServe = this.fcstServes.find(el => el.active);\r\n      if (currFcstServe) {\r\n        let strTime = \"\";\r\n        const startDate = moment(currFcstServe.currDate, \"YYMMDDHHmm\");\r\n        if (startDate.isValid()) {\r\n          strTime = startDate.format(\"YYYY-MM-DD HH:mm:ss\");\r\n        }\r\n        let forecastTime = \"\";\r\n        if (currFcstServe.id === \"latent\" && strTime) {\r\n          forecastTime = startDate\r\n            .clone()\r\n            .add(+currFcstServe.currHour, \"hours\")\r\n            .format(\"YYYY-MM-DD HH:mm:ss\");\r\n        } else {\r\n          forecastTime = strTime;\r\n        }\r\n        let eleName = \"\";\r\n        if (currFcstServe.id === \"short\") {\r\n          eleName = currFcstServe.elements.find(\r\n            el => el.id === currFcstServe.currElement\r\n          ).eleName;\r\n        } else {\r\n          eleName = currFcstServe.eleName;\r\n        }\r\n        this.$emit(\"change\", {\r\n          type: \"fcstServe\",\r\n          isHasActive: true,\r\n          strTime,\r\n          forecastTime,\r\n          eleName\r\n        });\r\n      } else {\r\n        this.$emit(\"change\", {\r\n          type: \"fcstServe\",\r\n          isHasActive: false\r\n        });\r\n      }\r\n    },\r\n\r\n    // 取消或选中或切换预报服务\r\n    onClickActiveServe(serve) {\r\n      serve.active = !serve.active;\r\n      this.fcstServes.forEach(el => {\r\n        if (el !== serve) {\r\n          el.active = false;\r\n        }\r\n      });\r\n    },\r\n\r\n    // 点击切换要素(所有)\r\n    onClickElement(ele, parentId) {\r\n      this.isModeProduct = parentId === \"modeProduct\";\r\n      if (this.currActiveElement === ele.name) return;\r\n      this.currActiveElement = ele.name;\r\n\r\n      this.setElementTime();\r\n      this.onChange();\r\n    },\r\n\r\n    // 切换要素时设置对应要素的时间（只针对客观产品）\r\n    setElementTime() {\r\n      const productElements = this.products.reduce(\r\n        (curr, item) => curr.concat(item.elements),\r\n        []\r\n      );\r\n      let curr = productElements.find(el => el.name === this.currActiveElement);\r\n      if (curr) {\r\n        // 客观产品\r\n        let startDate = '';\r\n        if (curr.parentId === \"modeProduct\") {\r\n          // 模式产品\r\n          const currModelNav = this.modeNavs.find(\r\n            el => el.value === this.currModeNavValue\r\n          );\r\n          this.fcstHourList = currModelNav.startHourList;\r\n          startDate = currModelNav.currStartDate;\r\n        }else {\r\n          this.fcstHourList = curr.startHourList;\r\n          startDate = curr.currStartDate;\r\n        }\r\n        if (startDate) {\r\n          this.fcstDate = moment(startDate, \"YYMMDDHHmm\");\r\n          this.fcstHour = this.fcstDate.format(\"HH\");\r\n        } else {\r\n          this.fcstDate = '';\r\n          this.fcstHour = this.fcstHourList[0];\r\n        }\r\n      }\r\n    },\r\n\r\n    //多模式切换\r\n    onClickModeNav(value) {\r\n      this.currModeNavValue = value;\r\n      this.setElementTime();\r\n      this.onChange();\r\n    },\r\n\r\n    // 得到预报服务时间\r\n    getFcstServeTimes() {\r\n      const CancelToken = axios.CancelToken;\r\n      axios\r\n        .get(\"/proxy/10.20.67.111/zh/dataNew.json\", {\r\n          cancelToken: new CancelToken(c => {\r\n            this.cancelRequests.push(c);\r\n          })\r\n        })\r\n        .then(data => {\r\n          const timeList = data.data.data;\r\n          this.fcstServes.forEach(el => {\r\n            const curr = timeList.find(item => item.name === el.dataName);\r\n            if (curr && curr.times.length) {\r\n              el.startDates = curr.times.slice(0, 30);\r\n              el.currDate = curr.times[0];\r\n            }\r\n          });\r\n          this.onServeChange();\r\n        });\r\n    },\r\n\r\n    // 得到每个要素的时间\r\n    getElementTimes() {\r\n      const CancelToken = axios.CancelToken;\r\n      axios\r\n        .get(\"/proxy/10.20.67.111/zh/nowcastdata.json\", {\r\n          cancelToken: new CancelToken(c => {\r\n            this.cancelRequests.push(c);\r\n          })\r\n        })\r\n        .then(data => {\r\n          const timeList = data.data.data;\r\n          this.products.forEach(product => {\r\n            product.elements.forEach(el => {\r\n              if (el.parentId === \"modeProduct\") return;\r\n              const curr = timeList.find(item => item.name === el.name);\r\n              if (curr && curr.times.length) {\r\n                el.currStartDate = curr.times[0];\r\n              }\r\n            });\r\n          });\r\n          // 模式产品\r\n          this.modeNavs.forEach(el => {\r\n            const curr = timeList.find(item => item.name === el.timeName);\r\n            if (curr && curr.times.length) {\r\n              const latestTime = curr.times[0];\r\n              if (el.value === '多模式') {\r\n                // 多模式取的是Grapes的时间，在这要做特殊处理\r\n                // console.log(latestTime);\r\n                const mTime = moment(latestTime, 'YYMMDDHHmm');\r\n                const mTimeUnix = mTime.unix();\r\n                // const hour = mTime.format('HH');\r\n\r\n                // 生成由大到小的时间列表\r\n                const unixList = [el.startHourList, el.startHourList].reduce((curr, item, i) => {\r\n                  const date = mTime.clone().startOf('day').subtract(i, 'days');\r\n                  const list = item.slice().reverse();\r\n                  curr = curr.concat(list.map(h => {\r\n                    return date.clone().add(+h, 'hours').unix();\r\n                  }));\r\n                  return curr;\r\n                }, []);\r\n                let currStartDate = unixList.find(u => mTimeUnix >= u);\r\n                if (currStartDate) {\r\n                  el.currStartDate = moment.unix(currStartDate).format('YYMMDDHHmm');\r\n                }\r\n                // console.log(el.currStartDate);\r\n\r\n                // if(el.startHourList.includes(hour)) {\r\n                //   el.currStartDate = latestTime;\r\n                // }else if (hour > 20) {\r\n                //   el.currStartDate = mTime.clone().startOf('day').add(20, 'hours').format('YYMMDDHHmm');\r\n                // }else if (hour < 20) {\r\n                //   el.currStartDate = mTime.clone().startOf('day').add(8, 'hours').format('YYMMDDHHmm');\r\n                // }else if (hour < 8) {\r\n                //   el.currStartDate = mTime.clone().startOf('day').subtract(1, 'days').add(20, 'hours').format('YYMMDDHHmm');\r\n                // }\r\n              }else {\r\n                el.currStartDate = latestTime;\r\n              } \r\n            }\r\n          });\r\n          this.setElementTime();\r\n          this.onChange();\r\n        });\r\n\r\n      // 以一个要素的最新时间代替请求中分析产品(自动站客观分析)中所有要素的最新时间\r\n      const body = {\r\n        modeName: \"qiangtianqi\",\r\n        eleName: \"OBSanaly:FenXizidongzhanHB:华北:海平面气压、温度、风场\",\r\n        strTime: \"\",\r\n        forecastTime: \"\",\r\n        level: \"\",\r\n        userDefinedParas: \"\",\r\n        symbol: 1\r\n      };\r\n      const params = new URLSearchParams();\r\n      for (const key in body) {\r\n        params.append(key, body[key]);\r\n      }\r\n      axios\r\n        .post(\"/proxy/10.20.67.111/PictureInfoForgetFilePath.action\", params, {\r\n          cancelToken: new CancelToken(c => {\r\n            this.cancelRequests.push(c);\r\n          })\r\n        })\r\n        .then(data => {\r\n          if (!data.data.path) return;\r\n\r\n          // [模式名字 要素名字  发布时间  预报时间 层次  文件路径]\r\n          const [\r\n            patternName,\r\n            eleName,\r\n            startTime,\r\n            fcstTime,\r\n            level,\r\n            filePath\r\n          ] = data.data.path.split(\",\");\r\n          const latestTime = moment(startTime, \"YYYY-MM-DD HH:mm:ss\");\r\n          this.centerDate = latestTime;\r\n          this.centerHour = latestTime.format(\"HH\");\r\n          this.centerMinute = latestTime.format(\"mm\");\r\n        });\r\n    },\r\n\r\n    // 取消所有请求\r\n    cancelAllRequest() {\r\n      this.cancelRequests.forEach(el => el());\r\n      this.cancelRequests = [];\r\n    }\r\n  }\r\n};\r\n"]}]}