{"remainingRequest":"D:\\program\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\program\\frontend\\src\\store\\modules\\synthesis\\actions.js","dependencies":[{"path":"D:\\program\\frontend\\src\\store\\modules\\synthesis\\actions.js","mtime":1553855602860},{"path":"D:\\program\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\program\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _slicedToArray from \"D:\\\\program\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/slicedToArray\";\nimport _defineProperty from \"D:\\\\program\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _objectSpread from \"D:\\\\program\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.array.find\";\nimport _getIterator from \"D:\\\\program\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/get-iterator\";\nimport _toConsumableArray from \"D:\\\\program\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.array.fill\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport * as moment from \"moment\";\nimport synthesisApi from \"../../../api/synthesis-api\";\nimport stateMethod from \"./state-method\"; // 是否启用当要素的时间不在总控时间要求的范围内时就隐藏图层\n\nvar isHideLayerNotInZkRange = true;\nvar common = {\n  // 通过总控时间和要素的时间列表来获取合适的要素时间, 该函数可以返回当前要素时间是否在总控时间要求的范围内的布尔值，以控制图层初始渲染的显示与隐藏\n  getElementTimeByZk: function getElementTimeByZk(zkTime, timeList, eleInterval, eleIntervalType) {\n    var zkTimeMmt = moment(zkTime, \"YYYYMMDDHHmm\");\n\n    if (eleIntervalType === \"minutes\") {\n      var currMinute = zkTimeMmt.minutes();\n      zkTimeMmt.minutes(currMinute - currMinute % eleInterval);\n    } else if (eleIntervalType === \"hours\") {\n      var currHour = zkTimeMmt.hours();\n      zkTimeMmt.hours(currHour - currHour % eleInterval).minutes(0);\n    }\n\n    var eleTime = zkTimeMmt.format(\"YYYYMMDDHHmm\");\n\n    if (timeList.includes(eleTime)) {\n      return {\n        isHideLayer: false,\n        time: eleTime\n      };\n    }\n\n    var afterTimeList = new Array(2).fill(null).map(function (el, i) {\n      var currTime = zkTimeMmt.clone().add(eleInterval * (i + 1), eleIntervalType);\n      return currTime.format(\"YYYYMMDDHHmm\");\n    }).reverse();\n    var beforeTimeList = new Array(2).fill(null).map(function (el, i) {\n      var currTime = zkTimeMmt.clone().subtract(eleInterval * (i + 1), eleIntervalType);\n      return currTime.format(\"YYYYMMDDHHmm\");\n    });\n    var validTimeList = [].concat(_toConsumableArray(afterTimeList), _toConsumableArray(beforeTimeList));\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = _getIterator(validTimeList), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var itemTime = _step.value;\n\n        if (timeList.includes(itemTime)) {\n          return {\n            isHideLayer: false,\n            time: itemTime\n          };\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return {\n      isHideLayer: isHideLayerNotInZkRange ? true : false,\n      //在总控时间范围内是否能找到要素时间，若有则显示图层，没有则隐藏\n      time: timeList[0]\n    };\n  }\n};\nexport default {\n  // 微调时间\n  tuning_element_time: function tuning_element_time(_ref, _ref2) {\n    var commit = _ref.commit,\n        state = _ref.state;\n    var id = _ref2.id,\n        time = _ref2.time;\n    var currElement = stateMethod.getAllElements(state).find(function (el) {\n      return el.id === id;\n    });\n\n    if (currElement) {\n      commit(\"update_element_time\", _objectSpread({}, currElement, {\n        latestTime: time\n      }));\n    }\n  },\n  // 删除指定id的要素(单站pup除外)\n  delete_element: function delete_element(_ref3, id) {\n    var commit = _ref3.commit,\n        state = _ref3.state;\n    var currElement = stateMethod.getAllElements(state).find(function (el) {\n      return el.id === id;\n    });\n\n    if (currElement && currElement.checked) {\n      commit(\"select_element\", currElement);\n      commit(\"update_element_time_list\", {\n        id: currElement.id,\n        timeList: []\n      });\n      commit(\"update_element_time\", _objectSpread({}, currElement, {\n        latestTime: \"\"\n      }));\n    }\n  },\n  // 删除所有选中要素\n  delete_all_element: function delete_all_element(_ref4) {\n    var commit = _ref4.commit,\n        state = _ref4.state;\n    var checkedElementList = stateMethod.getAllElements(state).filter(function (el) {\n      return el.checked;\n    });\n    checkedElementList.forEach(function (ele) {\n      commit(\"select_element\", ele);\n      commit(\"update_element_time_list\", {\n        id: ele.id,\n        timeList: []\n      });\n      commit(\"update_element_time\", _objectSpread({}, ele, {\n        latestTime: \"\"\n      }));\n    }); // 单站pup\n    // commit(\"stp_set_null_element_id\");\n    // commit(\"stp_radio_element\", \"\");\n  },\n  // 得到要素最新时间\n  get_latest_element_time: function get_latest_element_time(_ref5, eleOption) {\n    var commit = _ref5.commit,\n        getters = _ref5.getters;\n\n    // 要素没有选中时清空时间\n    if (!eleOption.checked) {\n      commit(\"update_element_time_list\", {\n        id: eleOption.id,\n        timeList: []\n      });\n      commit(\"update_element_time\", _objectSpread({}, eleOption, {\n        latestTime: \"\"\n      }));\n      return;\n    }\n\n    var interval = eleOption.interval,\n        intervalType = eleOption.intervalType; // 总控时间\n\n    var formatedZkTime = getters.formatedZkTime;\n\n    switch (eleOption.timeApiName) {\n      case \"dataTime\":\n        synthesisApi.getElementTimeForDataTime().then(function (data) {\n          var currTime = data.data.data.find(function (el) {\n            return el.name === eleOption.dataName;\n          });\n          var isHasTime = currTime && currTime.times.length;\n          var timeList = isHasTime ? currTime.times.map(function (el) {\n            return \"20\" + el;\n          }) : [];\n          var resTime = common.getElementTimeByZk(formatedZkTime, timeList, interval, intervalType);\n          console.log(resTime.time);\n          commit('add_show_hide_layer_option', _defineProperty({}, eleOption.id, resTime.isHideLayer));\n          commit(\"update_element_time_list\", {\n            id: eleOption.id,\n            timeList: timeList\n          });\n          commit(\"update_element_time\", _objectSpread({}, eleOption, {\n            latestTime: isHasTime ? resTime.time : \"\"\n          }));\n        });\n        break;\n\n      default:\n        var dataName = \"\";\n\n        if (eleOption.outerDataNameChipKey) {\n          var outerChip = eleOption[eleOption.outerDataNameChipKey];\n          var innerChip = eleOption[eleOption.innerDataNameChipKey];\n          dataName = eleOption.dataName + (outerChip ? outerChip : innerChip);\n        } else {\n          dataName = eleOption.dataName;\n        }\n\n        synthesisApi.getElementTime(dataName).then(function (data) {\n          var timeList = data.data[0].times.map(function (time) {\n            return \"20\" + time;\n          });\n          var resTime = common.getElementTimeByZk(formatedZkTime, timeList, interval, intervalType);\n          commit('add_show_hide_layer_option', _defineProperty({}, eleOption.id, resTime.isHideLayer));\n          commit(\"update_element_time_list\", {\n            id: eleOption.id,\n            timeList: timeList\n          });\n          commit(\"update_element_time\", _objectSpread({}, eleOption, {\n            latestTime: timeList.length ? resTime.time : \"\"\n          }));\n        });\n        break;\n    }\n  },\n  // 得到要素最新时间（只针对单站pup）\n  get_station_pup_latest_element_time: function get_station_pup_latest_element_time(_ref6) {\n    var commit = _ref6.commit,\n        state = _ref6.state,\n        getters = _ref6.getters;\n    var stationPup = state[\"splitScreen\" + state.ssIndex].stationPup;\n    var formatedZkTime = getters.formatedZkTime;\n    synthesisApi.getElementTime(stationPup.dataName).then(function (data) {\n      var timeList = data.data[0].times.map(function (time) {\n        return \"20\" + time;\n      });\n      var isHasTimes = timeList.length > 0;\n      var resTime = common.getElementTimeByZk(formatedZkTime, timeList, stationPup.interval, stationPup.intervalType);\n      commit('add_show_hide_layer_option', {\n        'stp': resTime.isHideLayer\n      });\n      commit(\"stp_update_times\", {\n        currEleTime: isHasTimes ? resTime.time : \"\",\n        currEleTimeList: isHasTimes ? timeList : []\n      });\n    });\n  },\n  // 更新所有选中要素的时间(当总控时间改变时), 要素的时间更新就会触发监听请求对应的数据\n  update_all_checked_element_time: function update_all_checked_element_time(_ref7) {\n    var dispatch = _ref7.dispatch,\n        commit = _ref7.commit,\n        state = _ref7.state;\n    var allCheckedElement = stateMethod.getAllElements(state).filter(function (el) {\n      return el.checked;\n    });\n    allCheckedElement.forEach(function (el) {\n      dispatch(\"get_latest_element_time\", el);\n    }); // 单站pup时间更新\n\n    var stationPup = state[\"splitScreen\" + state.ssIndex].stationPup;\n\n    if (stationPup.currEleId && stationPup.currStationId) {\n      dispatch(\"get_station_pup_latest_element_time\", stationPup.dataName);\n    }\n  },\n  // 获取总控的最新时间\n  get_latest_zk_time: function get_latest_zk_time(_ref8) {\n    var dispatch = _ref8.dispatch,\n        commit = _ref8.commit;\n    synthesisApi.getElementTime(\"全国雷达拼图\").then(function (data) {\n      var timeList = data.data[0].times;\n      var isHasTimes = timeList.length > 0;\n      var time = timeList[0];\n      var timeMmt;\n\n      if (isHasTimes) {\n        timeMmt = moment(\"20\" + time, \"YYYYMMDDHHmm\");\n      } else {\n        timeMmt = moment();\n        var currMinute = timeMmt.minutes();\n        var minute = currMinute - currMinute % 6;\n        timeMmt.minutes(minute);\n        timeMmt.subtract(24, \"minutes\");\n      }\n\n      commit(\"update_zk_date\", timeMmt.clone().startOf(\"day\"));\n      commit(\"update_zk_hour\", timeMmt.format(\"HH\"));\n      commit(\"update_zk_minute\", timeMmt.format(\"mm\"));\n      dispatch(\"update_all_checked_element_time\");\n    });\n  },\n  // 开启或关闭定时刷新\n  is_time_to_refresh: function is_time_to_refresh(_ref9) {\n    var dispatch = _ref9.dispatch,\n        commit = _ref9.commit,\n        state = _ref9.state;\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n\n    if (currSplitScreen.isAutoRefresh) {\n      dispatch(\"get_latest_zk_time\");\n      dispatch(\"get_latest_fcst_warning_time\");\n      dispatch(\"get_latest_value_fcst_time\");\n      commit(\"set_interval\", function () {\n        dispatch(\"get_latest_zk_time\");\n        dispatch(\"get_latest_fcst_warning_time\");\n        dispatch(\"get_latest_value_fcst_time\");\n      });\n    } else {\n      commit(\"clear_interval\");\n    }\n  },\n  // 得到预报预警下所有要素的最新起报时间并提交请求数据的突变\n  get_latest_fcst_warning_time: function get_latest_fcst_warning_time(_ref10) {\n    var dispatch = _ref10.dispatch,\n        commit = _ref10.commit,\n        state = _ref10.state;\n    var params = \"潜势预报,短时预报,强天气预警,省级预警\";\n    var fcstWarning = state[\"splitScreen\" + state.ssIndex].fcstWarning;\n    synthesisApi.getElementTime(params).then(function (data) {\n      data = data.data;\n      var shortTermTimes = data.find(function (el) {\n        return el.name === \"潜势预报\";\n      }).times.map(function (el) {\n        return \"20\" + el;\n      });\n      var shortTimeTimes = data.find(function (el) {\n        return el.name === \"短时预报\";\n      }).times.map(function (el) {\n        return \"20\" + el;\n      });\n      var stateWarnTimes = data.find(function (el) {\n        return el.name === \"强天气预警\";\n      }).times.map(function (el) {\n        return \"20\" + el;\n      });\n      var provinceWarnTimes = data.find(function (el) {\n        return el.name === \"省级预警\";\n      }).times.map(function (el) {\n        return \"20\" + el;\n      });\n\n      if (shortTermTimes.length) {\n        var time = moment(shortTermTimes[0], \"YYYYMMDDHHmm\");\n        commit('add_show_hide_layer_option', {\n          'fw_short_term': false\n        });\n        commit(\"fw_update_short_term_time_list\", {\n          timeList: shortTermTimes\n        });\n        commit(\"fw_update_short_term_time\", {\n          date: time.clone().startOf(\"day\"),\n          hour: time.format(\"HH\")\n        });\n      } else {\n        commit(\"fw_update_short_term_time_list\", {\n          timeList: []\n        });\n        commit(\"fw_update_short_term_time\", {\n          date: null,\n          hour: fcstWarning.shortTerm.hour\n        });\n      }\n\n      if (shortTimeTimes.length) {\n        commit('add_show_hide_layer_option', {\n          'fw_short_time': false\n        });\n        commit(\"fw_update_short_time_time_list\", {\n          timeList: shortTimeTimes\n        });\n        commit(\"fw_update_short_time_time\", {\n          date: shortTimeTimes[0]\n        });\n      } else {\n        commit(\"fw_update_short_time_time_list\", {\n          timeList: []\n        });\n        commit(\"fw_update_short_time_time\", {\n          date: ''\n        });\n      } // stateWarnTimes = ['201903221800', '201903212000'];\n\n\n      if (stateWarnTimes.length) {\n        var _time = moment(stateWarnTimes[0], \"YYYYMMDDHHmm\");\n\n        commit('add_show_hide_layer_option', {\n          'fw_warn_state': false\n        });\n        commit('fw_update_warn_state_time_list', {\n          timeList: stateWarnTimes\n        });\n        commit(\"fw_update_warn_state_time\", {\n          date: _time.clone().startOf(\"day\"),\n          hour: _time.format(\"HH\")\n        });\n      } else {\n        commit('fw_update_warn_state_time_list', {\n          timeList: []\n        });\n        commit(\"fw_update_warn_state_time\", {\n          date: null,\n          hour: fcstWarning.stateWarn.hour\n        });\n      }\n\n      if (provinceWarnTimes.length) {\n        var _time2 = moment(provinceWarnTimes[0], \"YYYYMMDDHHmm\");\n\n        commit('add_show_hide_layer_option', {\n          'fw_warn_province': false\n        });\n        commit('fw_update_warn_province_time_list', {\n          timeList: provinceWarnTimes\n        });\n        commit(\"fw_update_warn_province_time\", {\n          date: _time2.clone().startOf(\"day\"),\n          hour: _time2.format(\"HH\"),\n          minute: _time2.format(\"mm\")\n        });\n      } else {\n        commit('fw_update_warn_province_time_list', {\n          timeList: []\n        });\n        commit(\"fw_update_warn_province_time\", {\n          date: null,\n          hour: fcstWarning.provinceWarn.hour,\n          minute: fcstWarning.provinceWarn.minute\n        });\n      }\n    });\n  },\n  // 得到最新的数值预报时间并提交请求数据的突变\n  get_latest_value_fcst_time: function get_latest_value_fcst_time(_ref11) {\n    var dispatch = _ref11.dispatch,\n        commit = _ref11.commit,\n        state = _ref11.state,\n        getters = _ref11.getters;\n    var idNameList = [[\"ncep\", \"数值预报NCEP\"], [\"ec\", \"数值预报EC\"]];\n    var params = idNameList.map(function (el) {\n      return el[1];\n    }).join(\",\");\n    synthesisApi.getElementTime(params).then(function (data) {\n      data = data.data;\n      idNameList.forEach(function (item) {\n        var _item = _slicedToArray(item, 2),\n            id = _item[0],\n            name = _item[1];\n\n        var times = data.find(function (el) {\n          return el.name === name;\n        }).times.map(function (el) {\n          return '20' + el;\n        }); // times = ['201903220800', '201903220200'];  //测试时间\n\n        if (times.length) {\n          var time = moment(times[0], \"YYYYMMDDHHmm\");\n          commit('add_show_hide_layer_option', _defineProperty({}, 'vf_' + id, false));\n          commit('vf_update_time_list', {\n            id: id,\n            timeList: times\n          });\n          commit(\"vf_update_time\", {\n            id: id,\n            date: time.clone().startOf(\"day\"),\n            hour: time.format(\"HH\")\n          });\n        } else {\n          commit('vf_update_time_list', {\n            id: id,\n            timeList: []\n          });\n          commit(\"vf_update_time\", {\n            id: id,\n            date: null,\n            hour: getters.valueFcst.find(function (el) {\n              return el.id === id;\n            }).hour\n          });\n        }\n      });\n    });\n  }\n};",{"version":3,"sources":["D:\\program\\frontend\\src\\store\\modules\\synthesis\\actions.js"],"names":["moment","synthesisApi","stateMethod","isHideLayerNotInZkRange","common","getElementTimeByZk","zkTime","timeList","eleInterval","eleIntervalType","zkTimeMmt","currMinute","minutes","currHour","hours","eleTime","format","includes","isHideLayer","time","afterTimeList","Array","fill","map","el","i","currTime","clone","add","reverse","beforeTimeList","subtract","validTimeList","itemTime","tuning_element_time","commit","state","id","currElement","getAllElements","find","latestTime","delete_element","checked","delete_all_element","checkedElementList","filter","forEach","ele","get_latest_element_time","eleOption","getters","interval","intervalType","formatedZkTime","timeApiName","getElementTimeForDataTime","then","data","name","dataName","isHasTime","times","length","resTime","console","log","outerDataNameChipKey","outerChip","innerChip","innerDataNameChipKey","getElementTime","get_station_pup_latest_element_time","stationPup","ssIndex","isHasTimes","currEleTime","currEleTimeList","update_all_checked_element_time","dispatch","allCheckedElement","currEleId","currStationId","get_latest_zk_time","timeMmt","minute","startOf","is_time_to_refresh","currSplitScreen","isAutoRefresh","get_latest_fcst_warning_time","params","fcstWarning","shortTermTimes","shortTimeTimes","stateWarnTimes","provinceWarnTimes","date","hour","shortTerm","stateWarn","provinceWarn","get_latest_value_fcst_time","idNameList","join","item","valueFcst"],"mappings":"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","sourcesContent":["import * as moment from \"moment\";\r\n\r\nimport synthesisApi from \"../../../api/synthesis-api\";\r\nimport stateMethod from \"./state-method\";\r\n\r\n\r\n// 是否启用当要素的时间不在总控时间要求的范围内时就隐藏图层\r\nconst isHideLayerNotInZkRange = true;\r\n\r\n\r\n\r\nconst common = {\r\n  // 通过总控时间和要素的时间列表来获取合适的要素时间, 该函数可以返回当前要素时间是否在总控时间要求的范围内的布尔值，以控制图层初始渲染的显示与隐藏\r\n  getElementTimeByZk(zkTime, timeList, eleInterval, eleIntervalType) {\r\n    const zkTimeMmt = moment(zkTime, \"YYYYMMDDHHmm\");\r\n    if (eleIntervalType === \"minutes\") {\r\n      const currMinute = zkTimeMmt.minutes();\r\n      zkTimeMmt.minutes(currMinute - (currMinute % eleInterval));\r\n    } else if (eleIntervalType === \"hours\") {\r\n      const currHour = zkTimeMmt.hours();\r\n      zkTimeMmt.hours(currHour - (currHour % eleInterval)).minutes(0);\r\n    }\r\n\r\n    const eleTime = zkTimeMmt.format(\"YYYYMMDDHHmm\");\r\n\r\n    if (timeList.includes(eleTime)) {\r\n      return {\r\n        isHideLayer: false,\r\n        time: eleTime\r\n      };\r\n    }\r\n\r\n    const afterTimeList = new Array(2)\r\n      .fill(null)\r\n      .map((el, i) => {\r\n        const currTime = zkTimeMmt\r\n          .clone()\r\n          .add(eleInterval * (i + 1), eleIntervalType);\r\n        return currTime.format(\"YYYYMMDDHHmm\");\r\n      })\r\n      .reverse();\r\n\r\n    const beforeTimeList = new Array(2).fill(null).map((el, i) => {\r\n      const currTime = zkTimeMmt\r\n        .clone()\r\n        .subtract(eleInterval * (i + 1), eleIntervalType);\r\n      return currTime.format(\"YYYYMMDDHHmm\");\r\n    });\r\n\r\n    const validTimeList = [...afterTimeList, ...beforeTimeList];\r\n\r\n    for (const itemTime of validTimeList) {\r\n      if (timeList.includes(itemTime)) {\r\n        return {\r\n          isHideLayer: false,\r\n          time: itemTime\r\n        };\r\n      }\r\n    }\r\n\r\n    return {\r\n      isHideLayer: isHideLayerNotInZkRange ? true : false,  //在总控时间范围内是否能找到要素时间，若有则显示图层，没有则隐藏\r\n      time: timeList[0]\r\n    };\r\n  }\r\n};\r\n\r\nexport default {\r\n  // 微调时间\r\n  tuning_element_time({ commit, state }, { id, time }) {\r\n    const currElement = stateMethod\r\n      .getAllElements(state)\r\n      .find(el => el.id === id);\r\n    if (currElement) {\r\n      commit(\"update_element_time\", { ...currElement, latestTime: time });\r\n    }\r\n  },\r\n\r\n  // 删除指定id的要素(单站pup除外)\r\n  delete_element({ commit, state }, id) {\r\n    const currElement = stateMethod\r\n      .getAllElements(state)\r\n      .find(el => el.id === id);\r\n    if (currElement && currElement.checked) {\r\n      commit(\"select_element\", currElement);\r\n      commit(\"update_element_time_list\", {\r\n        id: currElement.id,\r\n        timeList: []\r\n      });\r\n      commit(\"update_element_time\", {\r\n        ...currElement,\r\n        latestTime: \"\"\r\n      });\r\n    }\r\n  },\r\n\r\n  // 删除所有选中要素\r\n  delete_all_element({ commit, state }) {\r\n    const checkedElementList = stateMethod\r\n      .getAllElements(state)\r\n      .filter(el => el.checked);\r\n    checkedElementList.forEach(ele => {\r\n      commit(\"select_element\", ele);\r\n      commit(\"update_element_time_list\", {\r\n        id: ele.id,\r\n        timeList: []\r\n      });\r\n      commit(\"update_element_time\", {\r\n        ...ele,\r\n        latestTime: \"\"\r\n      });\r\n    });\r\n\r\n    // 单站pup\r\n    // commit(\"stp_set_null_element_id\");\r\n    // commit(\"stp_radio_element\", \"\");\r\n  },\r\n\r\n  // 得到要素最新时间\r\n  get_latest_element_time({ commit, getters }, eleOption) {\r\n    // 要素没有选中时清空时间\r\n    if (!eleOption.checked) {\r\n      commit(\"update_element_time_list\", {\r\n        id: eleOption.id,\r\n        timeList: []\r\n      });\r\n      commit(\"update_element_time\", {\r\n        ...eleOption,\r\n        latestTime: \"\"\r\n      });\r\n      return;\r\n    }\r\n\r\n    const { interval, intervalType } = eleOption;\r\n    // 总控时间\r\n    const formatedZkTime = getters.formatedZkTime;\r\n\r\n    switch (eleOption.timeApiName) {\r\n      case \"dataTime\":\r\n        synthesisApi.getElementTimeForDataTime().then(data => {\r\n          const currTime = data.data.data.find(\r\n            el => el.name === eleOption.dataName\r\n          );\r\n          const isHasTime = currTime && currTime.times.length;\r\n          const timeList = isHasTime ? currTime.times.map(el => \"20\" + el) : [];\r\n          const resTime = common.getElementTimeByZk(\r\n            formatedZkTime,\r\n            timeList,\r\n            interval,\r\n            intervalType\r\n          );\r\n          console.log(resTime.time);\r\n          commit('add_show_hide_layer_option', {[eleOption.id]: resTime.isHideLayer});\r\n          commit(\"update_element_time_list\", {\r\n            id: eleOption.id,\r\n            timeList\r\n          });\r\n          commit(\"update_element_time\", {\r\n            ...eleOption,\r\n            latestTime: isHasTime ? resTime.time : \"\"\r\n          });\r\n        });\r\n        break;\r\n\r\n      default:\r\n        let dataName = \"\";\r\n        if (eleOption.outerDataNameChipKey) {\r\n          const outerChip = eleOption[eleOption.outerDataNameChipKey];\r\n          const innerChip = eleOption[eleOption.innerDataNameChipKey];\r\n          dataName = eleOption.dataName + (outerChip ? outerChip : innerChip);\r\n        } else {\r\n          dataName = eleOption.dataName;\r\n        }\r\n\r\n        synthesisApi.getElementTime(dataName).then(data => {\r\n          const timeList = data.data[0].times.map(time => \"20\" + time);\r\n          const resTime = common.getElementTimeByZk(\r\n            formatedZkTime,\r\n            timeList,\r\n            interval,\r\n            intervalType\r\n          );\r\n          commit('add_show_hide_layer_option', {[eleOption.id]: resTime.isHideLayer});\r\n          commit(\"update_element_time_list\", {\r\n            id: eleOption.id,\r\n            timeList\r\n          });\r\n          commit(\"update_element_time\", {\r\n            ...eleOption,\r\n            latestTime: timeList.length ? resTime.time : \"\"\r\n          });\r\n        });\r\n        break;\r\n    }\r\n  },\r\n\r\n  // 得到要素最新时间（只针对单站pup）\r\n  get_station_pup_latest_element_time({ commit, state, getters }) {\r\n    const stationPup = state[\"splitScreen\" + state.ssIndex].stationPup;\r\n    const formatedZkTime = getters.formatedZkTime;\r\n    synthesisApi.getElementTime(stationPup.dataName).then(data => {\r\n      const timeList = data.data[0].times.map(time => \"20\" + time);\r\n      const isHasTimes = timeList.length > 0;\r\n\r\n      const resTime = common.getElementTimeByZk(\r\n        formatedZkTime,\r\n        timeList,\r\n        stationPup.interval,\r\n        stationPup.intervalType\r\n      );\r\n      commit('add_show_hide_layer_option', {'stp': resTime.isHideLayer});\r\n      commit(\"stp_update_times\", {\r\n        currEleTime: isHasTimes ? resTime.time : \"\",\r\n        currEleTimeList: isHasTimes ? timeList : []\r\n      });\r\n      \r\n    });\r\n  },\r\n\r\n  // 更新所有选中要素的时间(当总控时间改变时), 要素的时间更新就会触发监听请求对应的数据\r\n  update_all_checked_element_time({ dispatch, commit, state }) {\r\n    const allCheckedElement = stateMethod\r\n      .getAllElements(state)\r\n      .filter(el => el.checked);\r\n\r\n    allCheckedElement.forEach(el => {\r\n      dispatch(\"get_latest_element_time\", el);\r\n    });\r\n\r\n    // 单站pup时间更新\r\n    const stationPup = state[\"splitScreen\" + state.ssIndex].stationPup;\r\n    if (stationPup.currEleId && stationPup.currStationId) {\r\n      dispatch(\"get_station_pup_latest_element_time\", stationPup.dataName);\r\n    }\r\n  },\r\n\r\n  // 获取总控的最新时间\r\n  get_latest_zk_time({ dispatch, commit }) {\r\n    synthesisApi.getElementTime(\"全国雷达拼图\").then(data => {\r\n      const timeList = data.data[0].times;\r\n      const isHasTimes = timeList.length > 0;\r\n      const time = timeList[0];\r\n      let timeMmt;\r\n      if (isHasTimes) {\r\n        timeMmt = moment(\"20\" + time, \"YYYYMMDDHHmm\");\r\n      } else {\r\n        timeMmt = moment();\r\n        const currMinute = timeMmt.minutes();\r\n        const minute = currMinute - (currMinute % 6);\r\n        timeMmt.minutes(minute);\r\n        timeMmt.subtract(24, \"minutes\");\r\n      }\r\n\r\n      commit(\"update_zk_date\", timeMmt.clone().startOf(\"day\"));\r\n      commit(\"update_zk_hour\", timeMmt.format(\"HH\"));\r\n      commit(\"update_zk_minute\", timeMmt.format(\"mm\"));\r\n\r\n      dispatch(\"update_all_checked_element_time\");\r\n    });\r\n  },\r\n\r\n  // 开启或关闭定时刷新\r\n  is_time_to_refresh({ dispatch, commit, state }) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    if (currSplitScreen.isAutoRefresh) {\r\n      dispatch(\"get_latest_zk_time\");\r\n      dispatch(\"get_latest_fcst_warning_time\");\r\n      dispatch(\"get_latest_value_fcst_time\");\r\n      commit(\"set_interval\", () => {\r\n        dispatch(\"get_latest_zk_time\");\r\n        dispatch(\"get_latest_fcst_warning_time\");\r\n        dispatch(\"get_latest_value_fcst_time\");\r\n      });\r\n    } else {\r\n      commit(\"clear_interval\");\r\n    }\r\n  },\r\n\r\n  // 得到预报预警下所有要素的最新起报时间并提交请求数据的突变\r\n  get_latest_fcst_warning_time({ dispatch, commit, state }) {\r\n    const params = \"潜势预报,短时预报,强天气预警,省级预警\";\r\n    const fcstWarning = state[\"splitScreen\" + state.ssIndex].fcstWarning;\r\n    synthesisApi.getElementTime(params).then(data => {\r\n      data = data.data;\r\n      let shortTermTimes = data\r\n        .find(el => el.name === \"潜势预报\")\r\n        .times.map(el => \"20\" + el);\r\n      let shortTimeTimes = data\r\n        .find(el => el.name === \"短时预报\")\r\n        .times.map(el => \"20\" + el);\r\n      let stateWarnTimes = data\r\n        .find(el => el.name === \"强天气预警\")\r\n        .times.map(el => \"20\" + el);\r\n      let provinceWarnTimes = data\r\n        .find(el => el.name === \"省级预警\")\r\n        .times.map(el => \"20\" + el);\r\n\r\n      if (shortTermTimes.length) {\r\n        const time = moment(shortTermTimes[0], \"YYYYMMDDHHmm\");\r\n        commit('add_show_hide_layer_option', {'fw_short_term': false});\r\n        commit(\"fw_update_short_term_time_list\", { timeList: shortTermTimes });\r\n        commit(\"fw_update_short_term_time\", {\r\n          date: time.clone().startOf(\"day\"),\r\n          hour: time.format(\"HH\")\r\n        });\r\n      }else {\r\n        commit(\"fw_update_short_term_time_list\", { timeList: [] });\r\n        commit(\"fw_update_short_term_time\", {\r\n          date: null,\r\n          hour: fcstWarning.shortTerm.hour\r\n        });\r\n      }\r\n\r\n      if (shortTimeTimes.length) {\r\n        commit('add_show_hide_layer_option', {'fw_short_time': false});\r\n        commit(\"fw_update_short_time_time_list\", {\r\n          timeList: shortTimeTimes\r\n        });\r\n        commit(\"fw_update_short_time_time\", {\r\n          date: shortTimeTimes[0]\r\n        });\r\n      }else {\r\n        commit(\"fw_update_short_time_time_list\", {\r\n          timeList: []\r\n        });\r\n        commit(\"fw_update_short_time_time\", {\r\n          date: ''\r\n        });\r\n      }\r\n\r\n      // stateWarnTimes = ['201903221800', '201903212000'];\r\n      if (stateWarnTimes.length) {\r\n        const time = moment(stateWarnTimes[0], \"YYYYMMDDHHmm\");\r\n        commit('add_show_hide_layer_option', {'fw_warn_state': false});\r\n        commit('fw_update_warn_state_time_list', {timeList: stateWarnTimes});\r\n        commit(\"fw_update_warn_state_time\", {\r\n          date: time.clone().startOf(\"day\"),\r\n          hour: time.format(\"HH\")\r\n        });\r\n      }else {\r\n        commit('fw_update_warn_state_time_list', {timeList: []});\r\n        commit(\"fw_update_warn_state_time\", {\r\n          date: null,\r\n          hour: fcstWarning.stateWarn.hour\r\n        });\r\n      }\r\n\r\n      if (provinceWarnTimes.length) {\r\n        const time = moment(provinceWarnTimes[0], \"YYYYMMDDHHmm\");\r\n        commit('add_show_hide_layer_option', {'fw_warn_province': false});\r\n        commit('fw_update_warn_province_time_list', {timeList: provinceWarnTimes});\r\n        commit(\"fw_update_warn_province_time\", {\r\n          date: time.clone().startOf(\"day\"),\r\n          hour: time.format(\"HH\"),\r\n          minute: time.format(\"mm\")\r\n        });\r\n      }else {\r\n        commit('fw_update_warn_province_time_list', {timeList: []});\r\n        commit(\"fw_update_warn_province_time\", {\r\n          date: null,\r\n          hour: fcstWarning.provinceWarn.hour,\r\n          minute: fcstWarning.provinceWarn.minute,\r\n        });\r\n      }\r\n    });\r\n  },\r\n\r\n  // 得到最新的数值预报时间并提交请求数据的突变\r\n  get_latest_value_fcst_time({ dispatch, commit, state, getters }) {\r\n    const idNameList = [[\"ncep\", \"数值预报NCEP\"], [\"ec\", \"数值预报EC\"]];\r\n    const params = idNameList.map(el => el[1]).join(\",\");\r\n    synthesisApi.getElementTime(params).then(data => {\r\n      data = data.data;\r\n      idNameList.forEach(item => {\r\n        const [id, name] = item;\r\n        let times = data.find(el => el.name === name).times.map(el => '20' + el);\r\n        // times = ['201903220800', '201903220200'];  //测试时间\r\n        if (times.length) {\r\n          const time = moment(times[0], \"YYYYMMDDHHmm\");\r\n          commit('add_show_hide_layer_option', {['vf_' + id]: false});\r\n          commit('vf_update_time_list', {\r\n            id,\r\n            timeList: times\r\n          })\r\n          commit(\"vf_update_time\", {\r\n            id,\r\n            date: time.clone().startOf(\"day\"),\r\n            hour: time.format(\"HH\")\r\n          });\r\n        }else {\r\n          commit('vf_update_time_list', {\r\n            id,\r\n            timeList: []\r\n          })\r\n          commit(\"vf_update_time\", {\r\n            id,\r\n            date: null,\r\n            hour: getters.valueFcst.find(el => el.id === id).hour\r\n          });\r\n        }\r\n      });\r\n    });\r\n  }\r\n};\r\n"]}]}