{"remainingRequest":"D:\\program\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\program\\frontend\\src\\components\\share\\time-select\\TimeSelect.js?vue&type=script&lang=js&","dependencies":[{"path":"D:\\program\\frontend\\src\\components\\share\\time-select\\TimeSelect.js","mtime":1553855602915},{"path":"D:\\program\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\program\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Array$isArray from \"D:\\\\program\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/array/is-array\";\nimport * as moment from \"moment\";\nimport { ToolBtn } from '../../base';\nexport default {\n  name: \"time-select\",\n  components: {\n    ToolBtn: ToolBtn\n  },\n  props: {\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    isBtnBoth: {\n      type: Boolean,\n      default: false\n    },\n    isShowMinute: {\n      type: Boolean,\n      default: false\n    },\n    dateTitle: {\n      type: String,\n      default: '日期'\n    },\n    hourTitle: {\n      type: String,\n      default: '初始时间'\n    },\n    date: {\n      required: true,\n      validator: function validator(value) {\n        return moment.isMoment(value) || value === '';\n      }\n    },\n    hour: {\n      required: true,\n      validator: function validator(value) {\n        // debugger;\n        return /^([01]\\d|2[0123])$/.test(value) || value === '';\n      }\n    },\n    minute: {\n      validator: function validator(value) {\n        return /^[012345]\\d$/.test(value) || value === '';\n      }\n    },\n    hourList: {\n      required: true,\n      validator: function validator(value) {\n        if (_Array$isArray(value)) {\n          if (value.length === 0) return true;\n          return value.every(function (val) {\n            return /^([01]\\d|2[0123])$/.test(val);\n          });\n        }\n\n        return false;\n      }\n    },\n    minuteList: {\n      validator: function validator(value) {\n        if (_Array$isArray(value) && value.length > 1) {\n          return value.every(function (val) {\n            return /^[012345]\\d$/.test(val);\n          });\n        }\n\n        return false;\n      }\n    }\n  },\n  watch: {\n    date: function date(val) {\n      this.currDate = val ? val : null;\n      this.$emit('update:date', val);\n    },\n    hour: function hour(val) {\n      this.currHour = val;\n      this.$emit('update:hour', val);\n    },\n    minute: function minute(val) {\n      this.currMinute = val;\n      this.$emit('update:minute', val);\n    }\n  },\n  data: function data() {\n    return {\n      currDate: null,\n      currHour: this.hour,\n      currMinute: this.minute\n    };\n  },\n  computed: {\n    interval: function interval() {\n      return Math.abs(this.hourList[0] - this.hourList[1]);\n    },\n    isVaild: function isVaild() {\n      return this.currDate && this.currHour && this.hourList.length;\n    }\n  },\n  mounted: function mounted() {\n    this.currDate = this.date ? this.date.clone() : null;\n  },\n  methods: {\n    onChange: function onChange(syncPropName) {\n      if (!this.isVaild) return;\n\n      if (syncPropName === 'date') {\n        this.$emit('update:date', this.currDate);\n      } else if (syncPropName === 'hour') {\n        this.$emit('update:hour', this.currHour);\n      } else if (syncPropName === 'minute') {\n        this.$emit('update:minute', this.currMinute);\n      }\n\n      this.$emit('change');\n    },\n    onTuningTime: function onTuningTime(sign) {\n      if (!this.isVaild) return;\n      var time = moment(this.currDate.format('YYYYMMDD'), 'YYYYMMDD').add(+this.currHour, 'hours');\n\n      if (sign === 1) {\n        time.add(this.interval, 'hours');\n      } else {\n        time.subtract(this.interval, 'hours');\n      }\n\n      this.currDate = time;\n      this.currHour = time.format('HH');\n      this.$emit('update:date', this.currDate);\n      this.$emit('update:hour', this.currHour);\n      this.$emit('change');\n    }\n  }\n};",{"version":3,"sources":["D:\\program\\frontend\\src\\components\\share\\time-select\\TimeSelect.js"],"names":["moment","ToolBtn","name","components","props","disabled","type","Boolean","default","isBtnBoth","isShowMinute","dateTitle","String","hourTitle","date","required","validator","value","isMoment","hour","test","minute","hourList","length","every","val","minuteList","watch","currDate","$emit","currHour","currMinute","data","computed","interval","Math","abs","isVaild","mounted","clone","methods","onChange","syncPropName","onTuningTime","sign","time","format","add","subtract"],"mappings":"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","sourcesContent":["import * as moment from \"moment\";\r\nimport { ToolBtn } from '../../base';\r\nexport default {\r\n  name: \"time-select\",\r\n  components: { ToolBtn },\r\n  props: {\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    isBtnBoth: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    isShowMinute: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    dateTitle: {\r\n      type: String,\r\n      default: '日期'\r\n    },\r\n    hourTitle: {\r\n      type: String,\r\n      default: '初始时间'\r\n    },\r\n    date: {\r\n      required: true,\r\n      validator(value) {\r\n        return moment.isMoment(value) || value === '';\r\n      }\r\n    },\r\n    hour: {\r\n      required: true,\r\n      validator(value) {\r\n        // debugger;\r\n        return /^([01]\\d|2[0123])$/.test(value) || value === '';\r\n      }\r\n    },\r\n    minute: {\r\n      validator(value) {\r\n        return /^[012345]\\d$/.test(value) || value === '';\r\n      }\r\n    },\r\n    hourList: {\r\n      required: true,\r\n      validator(value) {\r\n        if (Array.isArray(value)) {\r\n          if (value.length === 0) return true; \r\n          return value.every(val => /^([01]\\d|2[0123])$/.test(val));\r\n        }\r\n        return false;\r\n      }\r\n    },\r\n    minuteList: {\r\n      validator(value) {\r\n        if (Array.isArray(value) && value.length > 1) {\r\n          return value.every(val => /^[012345]\\d$/.test(val));\r\n        }\r\n        return false;\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    date(val) {\r\n      this.currDate = val ? val : null;\r\n      this.$emit('update:date', val);\r\n    },\r\n    hour(val) {\r\n      this.currHour = val;\r\n      this.$emit('update:hour', val);\r\n    },\r\n    minute(val) {\r\n      this.currMinute = val;\r\n      this.$emit('update:minute', val);\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      currDate: null,\r\n      currHour: this.hour,\r\n      currMinute: this.minute,\r\n    };\r\n  },\r\n  computed: {\r\n    interval() {\r\n      return Math.abs(this.hourList[0] - this.hourList[1]);\r\n    },\r\n    isVaild() {\r\n      return this.currDate && this.currHour && this.hourList.length;\r\n    }\r\n  },\r\n  mounted() {\r\n    this.currDate = this.date ? this.date.clone() : null;\r\n  },\r\n  methods: {\r\n    onChange(syncPropName) {\r\n      if (!this.isVaild) return;\r\n\r\n      if (syncPropName === 'date') {\r\n        this.$emit('update:date', this.currDate);\r\n      }else if (syncPropName === 'hour') {\r\n        this.$emit('update:hour', this.currHour);\r\n      }else if (syncPropName === 'minute') {\r\n        this.$emit('update:minute', this.currMinute);\r\n      }\r\n      this.$emit('change');\r\n    },\r\n\r\n    onTuningTime(sign) {\r\n      if (!this.isVaild) return;\r\n\r\n      const time = moment(this.currDate.format('YYYYMMDD'), 'YYYYMMDD').add(+this.currHour, 'hours');\r\n      if (sign === 1) {\r\n        time.add(this.interval, 'hours');\r\n      }else {\r\n        time.subtract(this.interval, 'hours');\r\n      }\r\n      this.currDate = time;\r\n      this.currHour = time.format('HH');\r\n      this.$emit('update:date', this.currDate);\r\n      this.$emit('update:hour', this.currHour);\r\n      this.$emit('change');\r\n    }\r\n  }\r\n};\r\n"]}]}