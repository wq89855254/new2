{"remainingRequest":"D:\\program\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\program\\frontend\\src\\components\\share\\time-minute-select\\TimeMinuteSelect.js?vue&type=script&lang=js&","dependencies":[{"path":"D:\\program\\frontend\\src\\components\\share\\time-minute-select\\TimeMinuteSelect.js","mtime":1553855602951},{"path":"D:\\program\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\program\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.array.find\";\nimport _Array$isArray from \"D:\\\\program\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/array/is-array\";\nimport * as moment from \"moment\";\nimport * as axios from \"axios\";\nimport { ToolBtn } from \"../../base\";\nexport default {\n  name: \"near\",\n  components: {\n    ToolBtn: ToolBtn\n  },\n  props: {\n    date: {\n      required: true,\n      validator: function validator(value) {\n        return moment.isMoment(value) || value === null;\n      }\n    },\n    hour: {\n      required: true,\n      validator: function validator(value) {\n        return /^([01]\\d|2[0123])$/.test(value);\n      }\n    },\n    minute: {\n      required: true,\n      validator: function validator(value) {\n        return /^[012345]\\d$/.test(value);\n      }\n    },\n    hourList: {\n      required: true,\n      validator: function validator(value) {\n        if (_Array$isArray(value) && value.length > 1) {\n          return value.every(function (val) {\n            return /^([01]\\d|2[0123])$/.test(val);\n          });\n        }\n\n        return false;\n      }\n    },\n    minuteList: {\n      required: true,\n      validator: function validator(value) {\n        if (_Array$isArray(value) && value.length > 1) {\n          return value.every(function (val) {\n            return /^[012345]\\d$/.test(val);\n          });\n        }\n\n        return false;\n      }\n    }\n  },\n  data: function data() {\n    return {\n      currDate: this.date,\n      currHour: this.hour,\n      currMinute: this.minute\n    };\n  },\n  watch: {\n    date: function date(_date) {\n      this.currDate = _date;\n    },\n    hour: function hour(_hour) {\n      this.currHour = _hour;\n    },\n    minute: function minute(_minute) {\n      this.currMinute = _minute;\n    }\n  },\n  computed: {\n    minuteInterval: function minuteInterval() {\n      return Math.abs(this.minuteList[0] - this.minuteList[1]);\n    }\n  },\n  mounted: function mounted() {},\n  beforeDestroy: function beforeDestroy() {},\n  methods: {\n    onChange: function onChange(sign) {\n      switch (sign) {\n        case \"date\":\n          this.$emit(\"update:date\", this.currDate);\n          break;\n\n        case \"hour\":\n          this.$emit(\"update:hour\", this.currHour);\n          break;\n\n        case \"minute\":\n          this.$emit(\"update:minute\", this.currMinute);\n          break;\n      }\n\n      this.$emit(\"change\");\n    },\n    onTuningTime: function onTuningTime(sign) {\n      var date = this.currDate.clone().startOf('day').add(+this.currHour, 'hours').add(+this.currMinute, 'minutes');\n      var isAdd = sign === 1;\n\n      if (isAdd) {\n        date.add(this.minuteInterval, 'minutes');\n      } else {\n        date.subtract(this.minuteInterval, 'minutes');\n      }\n\n      var hours = date.format('HH');\n      var minutes = date.format('mm');\n      var cloneHourList = this.hourList.slice();\n\n      if (isAdd) {\n        hours = cloneHourList.sort(function (a, b) {\n          return a - b;\n        }).find(function (h) {\n          return h >= hours;\n        });\n\n        if (hours === undefined) {\n          hours = this.hourList[0];\n          date.add(1, 'days');\n        }\n      } else {\n        hours = cloneHourList.sort(function (a, b) {\n          return b - a;\n        }).find(function (h) {\n          return h <= hours;\n        });\n\n        if (hours === undefined) {\n          hours = this.hourList.slice(-1)[0];\n          date.subtract(1, 'days');\n        }\n      }\n\n      this.currDate = date.clone().startOf('day').add(+hours, 'hours').add(+minutes, 'minutes');\n      this.currHour = hours;\n      this.currMinute = minutes;\n      this.$emit(\"update:date\", this.currDate);\n      this.$emit(\"update:hour\", this.currHour);\n      this.$emit(\"update:minute\", this.currMinute);\n      this.$emit('change');\n    }\n  }\n};",{"version":3,"sources":["D:\\program\\frontend\\src\\components\\share\\time-minute-select\\TimeMinuteSelect.js"],"names":["moment","axios","ToolBtn","name","components","props","date","required","validator","value","isMoment","hour","test","minute","hourList","length","every","val","minuteList","data","currDate","currHour","currMinute","watch","computed","minuteInterval","Math","abs","mounted","beforeDestroy","methods","onChange","sign","$emit","onTuningTime","clone","startOf","add","isAdd","subtract","hours","format","minutes","cloneHourList","slice","sort","a","b","find","h","undefined"],"mappings":"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","sourcesContent":["import * as moment from \"moment\";\r\nimport * as axios from \"axios\";\r\nimport { ToolBtn } from \"../../base\";\r\n\r\nexport default {\r\n  name: \"near\",\r\n  components: { ToolBtn },\r\n  props: {\r\n    date: {\r\n      required: true,\r\n      validator(value) {\r\n        return moment.isMoment(value) || value === null;\r\n      }\r\n    },\r\n    hour: {\r\n      required: true,\r\n      validator(value) {\r\n        return /^([01]\\d|2[0123])$/.test(value);\r\n      }\r\n    },\r\n    minute: {\r\n      required: true,\r\n      validator(value) {\r\n        return /^[012345]\\d$/.test(value);\r\n      }\r\n    },\r\n    hourList: {\r\n      required: true,\r\n      validator(value) {\r\n        if (Array.isArray(value) && value.length > 1) {\r\n          return value.every(val => /^([01]\\d|2[0123])$/.test(val));\r\n        }\r\n        return false;\r\n      }\r\n    },\r\n    minuteList: {\r\n      required: true,\r\n      validator(value) {\r\n        if (Array.isArray(value) && value.length > 1) {\r\n          return value.every(val => /^[012345]\\d$/.test(val));\r\n        }\r\n        return false;\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      currDate: this.date,\r\n      currHour: this.hour,\r\n      currMinute: this.minute\r\n    };\r\n  },\r\n  watch: {\r\n    date(date) {\r\n      this.currDate = date;\r\n    },\r\n    hour(hour) {\r\n      this.currHour = hour;\r\n    },\r\n    minute(minute) {\r\n      this.currMinute = minute;\r\n    },\r\n  },\r\n  computed: {\r\n    minuteInterval() {\r\n      return Math.abs(this.minuteList[0] - this.minuteList[1]);\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n  },\r\n\r\n  beforeDestroy() {},\r\n\r\n  methods: {\r\n    onChange(sign) {\r\n      switch (sign) {\r\n        case \"date\":\r\n          this.$emit(\"update:date\", this.currDate);\r\n          break;\r\n        case \"hour\":\r\n          this.$emit(\"update:hour\", this.currHour);\r\n          break;\r\n        case \"minute\":\r\n          this.$emit(\"update:minute\", this.currMinute);\r\n          break;\r\n      }\r\n      this.$emit(\"change\");\r\n    },\r\n    onTuningTime(sign) {\r\n      const date = this.currDate.clone().startOf('day').add(+this.currHour, 'hours').add(+this.currMinute, 'minutes');\r\n      const isAdd = sign === 1;\r\n      if (isAdd) {\r\n        date.add(this.minuteInterval, 'minutes');\r\n      }else {\r\n        date.subtract(this.minuteInterval, 'minutes');\r\n      }\r\n      let hours = date.format('HH');\r\n      const minutes = date.format('mm');\r\n      const cloneHourList = this.hourList.slice();\r\n      if (isAdd) {\r\n        hours = cloneHourList.sort((a, b) => a - b).find(h => h >= hours);\r\n        if (hours === undefined) {\r\n          hours = this.hourList[0];\r\n          date.add(1, 'days');\r\n        }\r\n      }else {\r\n        hours = cloneHourList.sort((a, b) => b - a).find(h => h <= hours);\r\n        if (hours === undefined) {\r\n          hours = this.hourList.slice(-1)[0];\r\n          date.subtract(1, 'days');\r\n        }\r\n      }\r\n      this.currDate = date.clone().startOf('day').add(+hours, 'hours').add(+minutes, 'minutes');\r\n      this.currHour = hours;\r\n      this.currMinute = minutes;\r\n      this.$emit(\"update:date\", this.currDate);\r\n      this.$emit(\"update:hour\", this.currHour);\r\n      this.$emit(\"update:minute\", this.currMinute);\r\n      this.$emit('change');\r\n\r\n    }\r\n  }\r\n};\r\n"]}]}