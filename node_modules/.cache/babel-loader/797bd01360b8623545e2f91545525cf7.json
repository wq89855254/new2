{"remainingRequest":"D:\\program\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\program\\frontend\\src\\components\\share\\level-select\\LevelSelect.js?vue&type=script&lang=js&","dependencies":[{"path":"D:\\program\\frontend\\src\\components\\share\\level-select\\LevelSelect.js","mtime":1553855603005},{"path":"D:\\program\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\program\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport _Array$isArray from \"D:\\\\program\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/array/is-array\";\nimport { ToolBtn, ConditionLayout } from '../../base';\nexport default {\n  name: \"level-select\",\n  components: {\n    ConditionLayout: ConditionLayout,\n    ToolBtn: ToolBtn\n  },\n  props: {\n    level: {\n      validator: function validator(value) {\n        return /^\\d{3,}$/.test(value) || value === '';\n      }\n    },\n    levelList: {\n      validator: function validator(value) {\n        if (_Array$isArray(value)) {\n          if (value.length === 0) return true;\n          return value.every(function (el) {\n            if (typeof el === \"string\") {\n              return /^\\d{3,}$/.test(el);\n            }\n\n            return false;\n          });\n        }\n\n        return false;\n      }\n    }\n  },\n  data: function data() {\n    return {\n      currLevel: this.level,\n      index: 0,\n      length: this.levelList.length\n    };\n  },\n  watch: {\n    level: function level(val) {\n      this.index = this.levelList.findIndex(function (el) {\n        return el === val;\n      });\n    },\n    levelList: function levelList(val) {\n      this.length = val.length;\n    }\n  },\n  updated: function updated() {\n    this.currLevel = this.level;\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    var levelIndex = this.levelList.findIndex(function (el) {\n      return el === _this.level;\n    });\n\n    if (levelIndex === -1) {\n      this.index = 0;\n\n      if (this.levelList.length) {\n        this.currLevel = this.levelList[0];\n        this.$emit(\"update:level\", this.currLevel);\n        this.$emit('level-change');\n      }\n    } else {\n      this.index = levelIndex;\n    }\n  },\n  methods: {\n    onLevelChange: function onLevelChange() {\n      this.$emit(\"update:level\", this.currLevel);\n      this.$emit('level-change');\n    },\n    onTuningLevel: function onTuningLevel(sign) {\n      if (sign === 1) {\n        this.index++;\n      } else {\n        this.index--;\n      }\n\n      if (this.index < 0) {\n        this.index = this.length - 1;\n      } else if (this.index >= this.length) {\n        this.index = 0;\n      }\n\n      this.currLevel = this.levelList[this.index];\n      this.$emit(\"update:level\", this.currLevel);\n      this.$emit('level-change');\n    }\n  }\n};",{"version":3,"sources":["D:\\program\\frontend\\src\\components\\share\\level-select\\LevelSelect.js"],"names":["ToolBtn","ConditionLayout","name","components","props","level","validator","value","test","levelList","length","every","el","data","currLevel","index","watch","val","findIndex","updated","mounted","levelIndex","$emit","methods","onLevelChange","onTuningLevel","sign"],"mappings":"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","sourcesContent":["import { ToolBtn, ConditionLayout } from '../../base';\r\n\r\nexport default {\r\n  name: \"level-select\",\r\n  components: { ConditionLayout, ToolBtn },\r\n  props: {\r\n    level: {\r\n      validator(value) {\r\n        return /^\\d{3,}$/.test(value) || value === '';\r\n      }\r\n    },\r\n    levelList: {\r\n      validator(value) {\r\n        if (Array.isArray(value)) {\r\n          if (value.length === 0) return true;\r\n          return value.every(el => {\r\n            if (typeof el === \"string\") {\r\n              return /^\\d{3,}$/.test(el);\r\n            }\r\n            return false;\r\n          });\r\n        }\r\n        return false;\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      currLevel: this.level,\r\n      index: 0,\r\n      length: this.levelList.length\r\n    };\r\n  },\r\n  watch: {\r\n    level(val) {\r\n      this.index = this.levelList.findIndex(el => el === val);\r\n    },\r\n    levelList(val) {\r\n      this.length = val.length;\r\n    }\r\n  },\r\n  updated() {\r\n    this.currLevel = this.level;\r\n  },\r\n  mounted() {\r\n\r\n    const levelIndex = this.levelList.findIndex(el => el === this.level);\r\n    if (levelIndex === -1) {\r\n      this.index = 0;\r\n      if ( this.levelList.length) {\r\n        this.currLevel = this.levelList[0];\r\n        this.$emit(\"update:level\", this.currLevel);\r\n        this.$emit('level-change');\r\n      }\r\n    } else {\r\n      this.index = levelIndex;\r\n    }\r\n  },\r\n  methods: {\r\n    onLevelChange() {\r\n      this.$emit(\"update:level\", this.currLevel);\r\n      this.$emit('level-change');\r\n    },\r\n    onTuningLevel(sign) {\r\n      if (sign === 1) {\r\n        this.index++;\r\n      } else {\r\n        this.index--;\r\n      }\r\n      if (this.index < 0) {\r\n        this.index = this.length - 1;\r\n      } else if (this.index >= this.length) {\r\n        this.index = 0;\r\n      }\r\n      this.currLevel = this.levelList[this.index];\r\n      this.$emit(\"update:level\", this.currLevel);\r\n      this.$emit('level-change');\r\n    }\r\n  }\r\n};\r\n"]}]}