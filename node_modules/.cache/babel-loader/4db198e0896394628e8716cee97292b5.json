{"remainingRequest":"D:\\program\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\program\\frontend\\src\\store\\modules\\synthesis\\mutations.js","dependencies":[{"path":"D:\\program\\frontend\\src\\store\\modules\\synthesis\\mutations.js","mtime":1553855602863},{"path":"D:\\program\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\program\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _defineProperty from \"D:\\\\program\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport _Object$assign from \"D:\\\\program\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/assign\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find\";\nimport stateMethod from \"./state-method\";\nexport default {\n  // 切换分屏\n  cut_split_screen: function cut_split_screen(state, index) {\n    var nList = [1, 2, 3, 4];\n\n    if (nList.indexOf(index) === -1) {\n      throw \"Must be 1, 2, 3, 4\";\n    }\n\n    state.ssIndex = index;\n  },\n  updata_zoomSwitch: function updata_zoomSwitch(state, val) {\n    state.zoomSwitch = val;\n  },\n  updata_zoomUrl: function updata_zoomUrl(state, url) {\n    state.zoomUrl = url;\n  },\n  // 选中或取消选中元素\n  select_element: function select_element(state, eleOption) {\n    var allEleList = stateMethod.getAllElements(state);\n    var currEle = allEleList.find(function (el) {\n      return el.id === eleOption.id;\n    });\n\n    if (currEle) {\n      currEle.checked = !currEle.checked;\n    }\n  },\n  // 更新元素时间(eleOption进行了浅拷贝，新加了latestTime字段用于存储最新时间)\n  update_element_time: function update_element_time(state, eleOption) {\n    var allEleList = stateMethod.getAllElements(state);\n    var currEle = allEleList.find(function (el) {\n      return el.id === eleOption.id;\n    });\n\n    if (currEle) {\n      currEle.time = eleOption.latestTime;\n    }\n  },\n  // 更新元素时间列表\n  update_element_time_list: function update_element_time_list(state, payload) {\n    var allEleList = stateMethod.getAllElements(state);\n    var currEle = allEleList.find(function (el) {\n      return el.id === payload.id;\n    });\n\n    if (currEle) {\n      currEle.timeList = payload.timeList;\n    }\n  },\n  // 强天气_更新小时\n  sw_update_hour: function sw_update_hour(state, hour) {\n    var severeWeather = state[\"splitScreen\" + state.ssIndex].severeWeather;\n    severeWeather.currHour = hour;\n  },\n  // 强天气_更新要素条件\n  sw_update_element_condition: function sw_update_element_condition(state, eleOption) {\n    var eleList = stateMethod.getSwElements(state);\n    var currEle = eleList.find(function (el) {\n      return el.id === eleOption.id;\n    });\n\n    if (currEle) {\n      currEle[eleOption.conditionKey] = eleOption.conditionValue;\n    }\n  },\n  // 云图_tabs切换\n  cp_cut_tabs: function cp_cut_tabs(state, name) {\n    var cloudPicture = state[\"splitScreen\" + state.ssIndex].cloudPicture;\n    cloudPicture.currTabName = name;\n  },\n  // 云图_改变要素时效(此eleOption经过了浅拷贝，在这currAging不是最新的值，但latestAging是最新的)\n  cp_aging_change: function cp_aging_change(state, eleOption) {\n    var eleList = stateMethod.getCpElements(state);\n    var currEle = eleList.find(function (el) {\n      return el.id === eleOption.id;\n    });\n\n    if (currEle) {\n      currEle.currAging = eleOption.latestAging;\n    }\n  },\n  // 自动站_阀值更新\n  st_threshold_change: function st_threshold_change(state, eleOption) {\n    var eleList = stateMethod.getStElements(state);\n    var currEle = eleList.find(function (el) {\n      return el.id === eleOption.id;\n    });\n\n    if (currEle) {\n      currEle.currThreshold = eleOption.latestThreshold;\n    }\n  },\n  // 自动站_小时更新\n  st_update_hour: function st_update_hour(state, hour) {\n    var station = state[\"splitScreen\" + state.ssIndex].station;\n    station.currHour = hour;\n  },\n  // SWAN拼图_层次更新\n  sn_level_change: function sn_level_change(state, eleOption) {\n    var eleList = stateMethod.getSnElements(state);\n    var currEle = eleList.find(function (el) {\n      return el.id === eleOption.id;\n    });\n\n    if (currEle) {\n      currEle.currLevel = eleOption.latestLevel;\n    }\n  },\n  // SWAN拼图_时效更新\n  sn_aging_change: function sn_aging_change(state, eleOption) {\n    var eleList = stateMethod.getSnElements(state);\n    var currEle = eleList.find(function (el) {\n      return el.id === eleOption.id;\n    });\n\n    if (currEle) {\n      currEle.currAging = eleOption.latestAging;\n    }\n  },\n  // 单站pup_更新站id\n  stp_update_station_id: function stp_update_station_id(state, id) {\n    var stationPup = state[\"splitScreen\" + state.ssIndex].stationPup;\n    stationPup.currStationId = id;\n  },\n  // 单站pup_单选要素\n  stp_radio_element: function stp_radio_element(state, id) {\n    var stationPup = state[\"splitScreen\" + state.ssIndex].stationPup;\n    stationPup.eleList = stationPup.eleList.map(function (el) {\n      el.checked = el.id === id;\n      return el;\n    });\n    stationPup.currEleId = id;\n  },\n  // 单站pup_清空当前选中的要素id\n  stp_set_null_element_id: function stp_set_null_element_id(state) {\n    var stationPup = state[\"splitScreen\" + state.ssIndex].stationPup;\n    stationPup.currEleId = \"\";\n  },\n  // 单站pup_更新时间\n  stp_update_times: function stp_update_times(state, _ref) {\n    var currEleTime = _ref.currEleTime,\n        currEleTimeList = _ref.currEleTimeList;\n    var stationPup = state[\"splitScreen\" + state.ssIndex].stationPup;\n    stationPup.currEleTime = currEleTime;\n    stationPup.currEleTimeList = currEleTimeList;\n  },\n  // 选择基本图层\n  select_base_layer: function select_base_layer(state, id) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    currSplitScreen.currBaseLayerId = id;\n  },\n  // 选择图层要素(边界线，行政点名称，河流等)\n  select_layer_element: function select_layer_element(state, id) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    currSplitScreen.layerElementList.forEach(function (el) {\n      if (el.id === id) {\n        el.checked = !el.checked;\n      }\n    });\n  },\n  // 取消或选择所有图层要素(边界线，行政点名称，河流等)\n  select_all_layer_element: function select_all_layer_element(state, isSelectAll) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    currSplitScreen.layerElementList.forEach(function (el) {\n      el.checked = isSelectAll;\n    });\n  },\n  // 更新总控日期\n  update_zk_date: function update_zk_date(state, date) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    currSplitScreen.date = date; //moment\n  },\n  // 更新总控小时\n  update_zk_hour: function update_zk_hour(state, hour) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    currSplitScreen.hour = hour; //HH\n  },\n  // 更新总控分钟\n  update_zk_minute: function update_zk_minute(state, minute) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    currSplitScreen.minute = minute; //mm\n  },\n  // 更新定时刷新状态(true还是false)\n  update_refresh_status: function update_refresh_status(state) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    currSplitScreen.isAutoRefresh = !currSplitScreen.isAutoRefresh;\n  },\n  //设置定时刷新\n  set_interval: function set_interval(state, fn) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    currSplitScreen.timer = setInterval(fn, 2 * 60 * 1000);\n  },\n  // 清除定时刷新\n  clear_interval: function clear_interval(state) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    clearInterval(currSplitScreen.timer);\n    currSplitScreen.timer = null;\n  },\n  // 预报预警_短期预报_条件更新 payload： {key: string, value: any}\n  fw_update_short_term: function fw_update_short_term(state, payload) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    var key = payload.key,\n        value = payload.value;\n    if (![\"date\", \"hour\", \"aging\"].includes(key)) throw \"\".concat(key, \" is invalid\");\n    currSplitScreen.fcstWarning.shortTerm[key] = value;\n  },\n  // 预报预警_短期预报_更新时间\n  fw_update_short_term_time: function fw_update_short_term_time(state, payload) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    var date = payload.date,\n        hour = payload.hour;\n    var shortTerm = currSplitScreen.fcstWarning.shortTerm;\n    shortTerm.date = date;\n    shortTerm.hour = hour;\n  },\n  // 预报预警_短期预报_更新时间列表\n  fw_update_short_term_time_list: function fw_update_short_term_time_list(state, payload) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    var timeList = payload.timeList;\n    var shortTerm = currSplitScreen.fcstWarning.shortTerm;\n    shortTerm.timeList = timeList;\n  },\n  // 预报预警_短时预报_条件更新 payload： {key: string, value: any}\n  fw_update_short_time: function fw_update_short_time(state, payload) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    var key = payload.key,\n        value = payload.value;\n    var shortTime = currSplitScreen.fcstWarning.shortTime;\n    if (![\"eleList\", \"date\"].includes(key)) throw \"\".concat(key, \" is invalid\");\n\n    if (key === \"eleList\") {\n      shortTime.eleList.forEach(function (el) {\n        el.checked = el.id === value;\n      });\n    } else if (key === \"date\") {\n      shortTime.date = value;\n    }\n  },\n  // 预报预警_短时预报_更新时间\n  fw_update_short_time_time: function fw_update_short_time_time(state, payload) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    var date = payload.date;\n    var shortTime = currSplitScreen.fcstWarning.shortTime;\n    shortTime.date = date;\n  },\n  // 预报预警_短时预报_更新时间列表\n  fw_update_short_time_time_list: function fw_update_short_time_time_list(state, payload) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    var timeList = payload.timeList;\n    var shortTime = currSplitScreen.fcstWarning.shortTime;\n    shortTime.timeList = timeList;\n  },\n  // 预报预警_预警信号_预警类型切换\n  fw_switch_warn_type: function fw_switch_warn_type(state, id) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    currSplitScreen.fcstWarning.currWarnId = id;\n  },\n  // 预报预警_国家预警_条件更新 payload： {key: string, value: any}\n  fw_update_warn_state: function fw_update_warn_state(state, payload) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    var key = payload.key,\n        value = payload.value;\n    if (![\"date\", \"hour\", \"aging\"].includes(key)) throw \"\".concat(key, \" is invalid\");\n    currSplitScreen.fcstWarning.stateWarn[key] = value;\n  },\n  // 预报预警_国家预警_更新时间\n  fw_update_warn_state_time: function fw_update_warn_state_time(state, payload) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    var date = payload.date,\n        hour = payload.hour;\n    var stateWarn = currSplitScreen.fcstWarning.stateWarn;\n    stateWarn.date = date;\n    stateWarn.hour = hour;\n  },\n  // 预报预警_国家预警_更新时间列表\n  fw_update_warn_state_time_list: function fw_update_warn_state_time_list(state, payload) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    var timeList = payload.timeList;\n    var stateWarn = currSplitScreen.fcstWarning.stateWarn;\n    stateWarn.timeList = timeList;\n  },\n  // 预报预警_省级预警_条件更新 payload： {key: string, value: any}\n  fw_update_warn_province: function fw_update_warn_province(state, payload) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    var provinceWarn = currSplitScreen.fcstWarning.provinceWarn;\n    var key = payload.key,\n        value = payload.value;\n    if (![\"date\", \"hour\", \"minute\", \"aging\", \"eleList\"].includes(key)) throw \"\".concat(key, \" is invalid\");\n\n    if (key === \"eleList\") {\n      provinceWarn.eleList.forEach(function (el) {\n        el.checked = el.id === value;\n      });\n    } else {\n      provinceWarn[key] = value;\n    }\n  },\n  // 预报预警_省级预警_更新时间\n  fw_update_warn_province_time: function fw_update_warn_province_time(state, payload) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    var date = payload.date,\n        hour = payload.hour,\n        minute = payload.minute;\n    var provinceWarn = currSplitScreen.fcstWarning.provinceWarn;\n    provinceWarn.date = date;\n    provinceWarn.hour = hour;\n    provinceWarn.minute = minute;\n  },\n  // 预报预警_省级预警_更新时间列表\n  fw_update_warn_province_time_list: function fw_update_warn_province_time_list(state, payload) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    var timeList = payload.timeList;\n    var provinceWarn = currSplitScreen.fcstWarning.provinceWarn;\n    provinceWarn.timeList = timeList;\n  },\n  // 数值预报_模式切换\n  vf_switch_tabs: function vf_switch_tabs(state, id) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    currSplitScreen.currValueFcstId = id;\n  },\n  // 数值预报_要素分类切换\n  vf_switch_element_tabs: function vf_switch_element_tabs(state, id) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    var curr = currSplitScreen.valueFcst.find(function (el) {\n      return el.id === currSplitScreen.currValueFcstId;\n    });\n    curr.typeEleId = id;\n  },\n  // 数值预报_更新时间\n  vf_update_time: function vf_update_time(state, payload) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    var id = payload.id,\n        date = payload.date,\n        hour = payload.hour;\n    var currModel = currSplitScreen.valueFcst.find(function (el) {\n      return el.id === id;\n    });\n    if (!currModel) throw \"\".concat(id, \" is invalid\");\n    currModel.date = date;\n    currModel.hour = hour;\n  },\n  // 数值预报_更新时间列表\n  vf_update_time_list: function vf_update_time_list(state, payload) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    var id = payload.id,\n        timeList = payload.timeList;\n    var currModel = currSplitScreen.valueFcst.find(function (el) {\n      return el.id === id;\n    });\n    if (!currModel) throw \"\".concat(id, \" is invalid\");\n    currModel.timeList = timeList;\n  },\n  // 数值预报_条件更新 payload： {sign: string, value: any}\n  vf_update: function vf_update(state, payload) {\n    var sign = payload.sign,\n        value = payload.value;\n    if (![\"date\", \"hour\", \"aging\", \"level\", \"element\"].includes(sign)) throw \"\".concat(sign, \" is invalid\");\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    var curr = currSplitScreen.valueFcst.find(function (el) {\n      return el.id === currSplitScreen.currValueFcstId;\n    });\n\n    switch (sign) {\n      case \"date\":\n        curr.date = value;\n        break;\n\n      case \"hour\":\n        curr.hour = value;\n        break;\n\n      case \"aging\":\n        curr.aging = value;\n        break;\n\n      case \"level\":\n        var currClass = curr.typeEleList.find(function (el) {\n          return el.id === curr.typeEleId;\n        });\n        currClass.level = value;\n        break;\n\n      case \"element\":\n        curr.typeEleList.forEach(function (item) {\n          item.eleList.forEach(function (el) {\n            if (el.id === value) {\n              el.checked = !el.checked;\n            } else {\n              el.checked = el.id === value;\n            }\n          });\n        });\n        break;\n    }\n  },\n  // 添加某一要素的显示隐藏图层的配置 payload: {[idName string]: boolean}, 这里其实要添加一个删除的mutation，但考虑产生的数据不多而且不删除也没有什么负作用，所有就省略了\n  add_show_hide_layer_option: function add_show_hide_layer_option(state, payload) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    currSplitScreen.showHideLayerHash = _Object$assign({}, currSplitScreen.showHideLayerHash, payload);\n  },\n  //显示或者隐藏某一要素图层(showHideLayerHash中的键值都来自于add_show_hide_layer_option)\n  show_hide_layer: function show_hide_layer(state, id) {\n    var currSplitScreen = state[\"splitScreen\" + state.ssIndex];\n    var showHideHash = currSplitScreen.showHideLayerHash;\n    if (showHideHash[id] === undefined) throw \"The \".concat(id, \" doesn't exist\"); // showHideHash[id] = !showHideHash[id];\n\n    currSplitScreen.showHideLayerHash = _Object$assign({}, showHideHash, _defineProperty({}, id, !showHideHash[id]));\n  }\n};",{"version":3,"sources":["D:\\program\\frontend\\src\\store\\modules\\synthesis\\mutations.js"],"names":["stateMethod","cut_split_screen","state","index","nList","indexOf","ssIndex","updata_zoomSwitch","val","zoomSwitch","updata_zoomUrl","url","zoomUrl","select_element","eleOption","allEleList","getAllElements","currEle","find","el","id","checked","update_element_time","time","latestTime","update_element_time_list","payload","timeList","sw_update_hour","hour","severeWeather","currHour","sw_update_element_condition","eleList","getSwElements","conditionKey","conditionValue","cp_cut_tabs","name","cloudPicture","currTabName","cp_aging_change","getCpElements","currAging","latestAging","st_threshold_change","getStElements","currThreshold","latestThreshold","st_update_hour","station","sn_level_change","getSnElements","currLevel","latestLevel","sn_aging_change","stp_update_station_id","stationPup","currStationId","stp_radio_element","map","currEleId","stp_set_null_element_id","stp_update_times","currEleTime","currEleTimeList","select_base_layer","currSplitScreen","currBaseLayerId","select_layer_element","layerElementList","forEach","select_all_layer_element","isSelectAll","update_zk_date","date","update_zk_hour","update_zk_minute","minute","update_refresh_status","isAutoRefresh","set_interval","fn","timer","setInterval","clear_interval","clearInterval","fw_update_short_term","key","value","includes","fcstWarning","shortTerm","fw_update_short_term_time","fw_update_short_term_time_list","fw_update_short_time","shortTime","fw_update_short_time_time","fw_update_short_time_time_list","fw_switch_warn_type","currWarnId","fw_update_warn_state","stateWarn","fw_update_warn_state_time","fw_update_warn_state_time_list","fw_update_warn_province","provinceWarn","fw_update_warn_province_time","fw_update_warn_province_time_list","vf_switch_tabs","currValueFcstId","vf_switch_element_tabs","curr","valueFcst","typeEleId","vf_update_time","currModel","vf_update_time_list","vf_update","sign","aging","currClass","typeEleList","level","item","add_show_hide_layer_option","showHideLayerHash","show_hide_layer","showHideHash","undefined"],"mappings":"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","sourcesContent":["import stateMethod from \"./state-method\";\r\n\r\nexport default {\r\n  // 切换分屏\r\n  cut_split_screen(state, index) {\r\n    const nList = [1, 2, 3, 4];\r\n    if (nList.indexOf(index) === -1) {\r\n      throw \"Must be 1, 2, 3, 4\";\r\n    }\r\n    state.ssIndex = index;\r\n  },\r\n  updata_zoomSwitch(state,val){\r\n    state.zoomSwitch=val\r\n  },\r\n  updata_zoomUrl(state,url){\r\n    state.zoomUrl=url\r\n  },\r\n\r\n  // 选中或取消选中元素\r\n  select_element(state, eleOption) {\r\n    const allEleList = stateMethod.getAllElements(state);\r\n    const currEle = allEleList.find(el => el.id === eleOption.id);\r\n    if (currEle) {\r\n      currEle.checked = !currEle.checked;\r\n    }\r\n  },\r\n  // 更新元素时间(eleOption进行了浅拷贝，新加了latestTime字段用于存储最新时间)\r\n  update_element_time(state, eleOption) {\r\n    const allEleList = stateMethod.getAllElements(state);\r\n    const currEle = allEleList.find(el => el.id === eleOption.id);\r\n    if (currEle) {\r\n      currEle.time = eleOption.latestTime;\r\n    }\r\n  },\r\n  // 更新元素时间列表\r\n  update_element_time_list(state, payload) {\r\n    const allEleList = stateMethod.getAllElements(state);\r\n    const currEle = allEleList.find(el => el.id === payload.id);\r\n    if (currEle) {\r\n      currEle.timeList = payload.timeList;\r\n    }\r\n  },\r\n\r\n  // 强天气_更新小时\r\n  sw_update_hour(state, hour) {\r\n    const severeWeather = state[\"splitScreen\" + state.ssIndex].severeWeather;\r\n    severeWeather.currHour = hour;\r\n  },\r\n\r\n  // 强天气_更新要素条件\r\n  sw_update_element_condition(state, eleOption) {\r\n    const eleList = stateMethod.getSwElements(state);\r\n    const currEle = eleList.find(el => el.id === eleOption.id);\r\n    if (currEle) {\r\n      currEle[eleOption.conditionKey] = eleOption.conditionValue;\r\n    }\r\n  },\r\n  // 云图_tabs切换\r\n  cp_cut_tabs(state, name) {\r\n    const cloudPicture = state[\"splitScreen\" + state.ssIndex].cloudPicture;\r\n    cloudPicture.currTabName = name;\r\n  },\r\n  // 云图_改变要素时效(此eleOption经过了浅拷贝，在这currAging不是最新的值，但latestAging是最新的)\r\n  cp_aging_change(state, eleOption) {\r\n    const eleList = stateMethod.getCpElements(state);\r\n    const currEle = eleList.find(el => el.id === eleOption.id);\r\n    if (currEle) {\r\n      currEle.currAging = eleOption.latestAging;\r\n    }\r\n  },\r\n  // 自动站_阀值更新\r\n  st_threshold_change(state, eleOption) {\r\n    const eleList = stateMethod.getStElements(state);\r\n    const currEle = eleList.find(el => el.id === eleOption.id);\r\n    if (currEle) {\r\n      currEle.currThreshold = eleOption.latestThreshold;\r\n    }\r\n  },\r\n\r\n  // 自动站_小时更新\r\n  st_update_hour(state, hour) {\r\n    const station = state[\"splitScreen\" + state.ssIndex].station;\r\n    station.currHour = hour;\r\n  },\r\n\r\n  // SWAN拼图_层次更新\r\n  sn_level_change(state, eleOption) {\r\n    const eleList = stateMethod.getSnElements(state);\r\n    const currEle = eleList.find(el => el.id === eleOption.id);\r\n    if (currEle) {\r\n      currEle.currLevel = eleOption.latestLevel;\r\n    }\r\n  },\r\n\r\n  // SWAN拼图_时效更新\r\n  sn_aging_change(state, eleOption) {\r\n    const eleList = stateMethod.getSnElements(state);\r\n    const currEle = eleList.find(el => el.id === eleOption.id);\r\n    if (currEle) {\r\n      currEle.currAging = eleOption.latestAging;\r\n    }\r\n  },\r\n\r\n  // 单站pup_更新站id\r\n  stp_update_station_id(state, id) {\r\n    const stationPup = state[\"splitScreen\" + state.ssIndex].stationPup;\r\n    stationPup.currStationId = id;\r\n  },\r\n\r\n  // 单站pup_单选要素\r\n  stp_radio_element(state, id) {\r\n    const stationPup = state[\"splitScreen\" + state.ssIndex].stationPup;\r\n    stationPup.eleList = stationPup.eleList.map(el => {\r\n      el.checked = el.id === id;\r\n      return el;\r\n    });\r\n    stationPup.currEleId = id;\r\n  },\r\n  // 单站pup_清空当前选中的要素id\r\n  stp_set_null_element_id(state) {\r\n    const stationPup = state[\"splitScreen\" + state.ssIndex].stationPup;\r\n    stationPup.currEleId = \"\";\r\n  },\r\n\r\n  // 单站pup_更新时间\r\n  stp_update_times(state, { currEleTime, currEleTimeList }) {\r\n    const stationPup = state[\"splitScreen\" + state.ssIndex].stationPup;\r\n    stationPup.currEleTime = currEleTime;\r\n    stationPup.currEleTimeList = currEleTimeList;\r\n  },\r\n\r\n  // 选择基本图层\r\n  select_base_layer(state, id) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    currSplitScreen.currBaseLayerId = id;\r\n  },\r\n\r\n  // 选择图层要素(边界线，行政点名称，河流等)\r\n  select_layer_element(state, id) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    currSplitScreen.layerElementList.forEach(el => {\r\n      if (el.id === id) {\r\n        el.checked = !el.checked;\r\n      }\r\n    });\r\n  },\r\n  // 取消或选择所有图层要素(边界线，行政点名称，河流等)\r\n  select_all_layer_element(state, isSelectAll) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    currSplitScreen.layerElementList.forEach(el => {\r\n      el.checked = isSelectAll;\r\n    });\r\n  },\r\n\r\n  // 更新总控日期\r\n  update_zk_date(state, date) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    currSplitScreen.date = date; //moment\r\n  },\r\n\r\n  // 更新总控小时\r\n  update_zk_hour(state, hour) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    currSplitScreen.hour = hour; //HH\r\n  },\r\n\r\n  // 更新总控分钟\r\n  update_zk_minute(state, minute) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    currSplitScreen.minute = minute; //mm\r\n  },\r\n\r\n  // 更新定时刷新状态(true还是false)\r\n  update_refresh_status(state) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    currSplitScreen.isAutoRefresh = !currSplitScreen.isAutoRefresh;\r\n  },\r\n\r\n  //设置定时刷新\r\n  set_interval(state, fn) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    currSplitScreen.timer = setInterval(fn, 2 * 60 * 1000);\r\n  },\r\n\r\n  // 清除定时刷新\r\n  clear_interval(state) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    clearInterval(currSplitScreen.timer);\r\n    currSplitScreen.timer = null;\r\n  },\r\n\r\n  // 预报预警_短期预报_条件更新 payload： {key: string, value: any}\r\n  fw_update_short_term(state, payload) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    const { key, value } = payload;\r\n    if (![\"date\", \"hour\", \"aging\"].includes(key)) throw `${key} is invalid`;\r\n    currSplitScreen.fcstWarning.shortTerm[key] = value;\r\n  },\r\n\r\n  // 预报预警_短期预报_更新时间\r\n  fw_update_short_term_time(state, payload) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    const { date, hour } = payload;\r\n    const shortTerm = currSplitScreen.fcstWarning.shortTerm;\r\n    shortTerm.date = date;\r\n    shortTerm.hour = hour;\r\n  },\r\n  // 预报预警_短期预报_更新时间列表\r\n  fw_update_short_term_time_list(state, payload) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    const { timeList } = payload;\r\n    const shortTerm = currSplitScreen.fcstWarning.shortTerm;\r\n    shortTerm.timeList = timeList;\r\n  },\r\n\r\n  // 预报预警_短时预报_条件更新 payload： {key: string, value: any}\r\n  fw_update_short_time(state, payload) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    const { key, value } = payload;\r\n    const shortTime = currSplitScreen.fcstWarning.shortTime;\r\n    if (![\"eleList\", \"date\"].includes(key)) throw `${key} is invalid`;\r\n    if (key === \"eleList\") {\r\n      shortTime.eleList.forEach(el => {\r\n        el.checked = el.id === value;\r\n      });\r\n    } else if (key === \"date\") {\r\n      shortTime.date = value;\r\n    }\r\n  },\r\n\r\n  // 预报预警_短时预报_更新时间\r\n  fw_update_short_time_time(state, payload) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    const { date } = payload;\r\n    const shortTime = currSplitScreen.fcstWarning.shortTime;\r\n    shortTime.date = date;\r\n  },\r\n  // 预报预警_短时预报_更新时间列表\r\n  fw_update_short_time_time_list(state, payload) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    const { timeList } = payload;\r\n    const shortTime = currSplitScreen.fcstWarning.shortTime;\r\n    shortTime.timeList = timeList;\r\n  },\r\n\r\n  // 预报预警_预警信号_预警类型切换\r\n  fw_switch_warn_type(state, id) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    currSplitScreen.fcstWarning.currWarnId = id;\r\n  },\r\n\r\n  // 预报预警_国家预警_条件更新 payload： {key: string, value: any}\r\n  fw_update_warn_state(state, payload) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    const { key, value } = payload;\r\n    if (![\"date\", \"hour\", \"aging\"].includes(key)) throw `${key} is invalid`;\r\n    currSplitScreen.fcstWarning.stateWarn[key] = value;\r\n  },\r\n\r\n  // 预报预警_国家预警_更新时间\r\n  fw_update_warn_state_time(state, payload) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    const { date, hour } = payload;\r\n    const stateWarn = currSplitScreen.fcstWarning.stateWarn;\r\n    stateWarn.date = date;\r\n    stateWarn.hour = hour;\r\n  },\r\n\r\n  // 预报预警_国家预警_更新时间列表\r\n  fw_update_warn_state_time_list(state, payload) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    const { timeList } = payload;\r\n    const stateWarn = currSplitScreen.fcstWarning.stateWarn;\r\n    stateWarn.timeList = timeList;\r\n  },\r\n\r\n  // 预报预警_省级预警_条件更新 payload： {key: string, value: any}\r\n  fw_update_warn_province(state, payload) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    const provinceWarn = currSplitScreen.fcstWarning.provinceWarn;\r\n    const { key, value } = payload;\r\n    if (![\"date\", \"hour\", \"minute\", \"aging\", \"eleList\"].includes(key))\r\n      throw `${key} is invalid`;\r\n\r\n    if (key === \"eleList\") {\r\n      provinceWarn.eleList.forEach(el => {\r\n        el.checked = el.id === value;\r\n      });\r\n    } else {\r\n      provinceWarn[key] = value;\r\n    }\r\n  },\r\n\r\n  // 预报预警_省级预警_更新时间\r\n  fw_update_warn_province_time(state, payload) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    const { date, hour, minute } = payload;\r\n    const provinceWarn = currSplitScreen.fcstWarning.provinceWarn;\r\n    provinceWarn.date = date;\r\n    provinceWarn.hour = hour;\r\n    provinceWarn.minute = minute;\r\n  },\r\n  // 预报预警_省级预警_更新时间列表\r\n  fw_update_warn_province_time_list(state, payload) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    const { timeList } = payload;\r\n    const provinceWarn = currSplitScreen.fcstWarning.provinceWarn;\r\n    provinceWarn.timeList = timeList;\r\n  },\r\n\r\n  // 数值预报_模式切换\r\n  vf_switch_tabs(state, id) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    currSplitScreen.currValueFcstId = id;\r\n  },\r\n\r\n  // 数值预报_要素分类切换\r\n  vf_switch_element_tabs(state, id) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    const curr = currSplitScreen.valueFcst.find(\r\n      el => el.id === currSplitScreen.currValueFcstId\r\n    );\r\n    curr.typeEleId = id;\r\n  },\r\n\r\n  // 数值预报_更新时间\r\n  vf_update_time(state, payload) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    const { id, date, hour } = payload;\r\n    const currModel = currSplitScreen.valueFcst.find(el => el.id === id);\r\n    if (!currModel) throw `${id} is invalid`;\r\n    currModel.date = date;\r\n    currModel.hour = hour;\r\n  },\r\n\r\n  // 数值预报_更新时间列表\r\n  vf_update_time_list(state, payload) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    const { id, timeList } = payload;\r\n    const currModel = currSplitScreen.valueFcst.find(el => el.id === id);\r\n    if (!currModel) throw `${id} is invalid`;\r\n    currModel.timeList = timeList;\r\n  },\r\n\r\n  // 数值预报_条件更新 payload： {sign: string, value: any}\r\n  vf_update(state, payload) {\r\n    const { sign, value } = payload;\r\n    if (![\"date\", \"hour\", \"aging\", \"level\", \"element\"].includes(sign))\r\n      throw `${sign} is invalid`;\r\n\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    const curr = currSplitScreen.valueFcst.find(\r\n      el => el.id === currSplitScreen.currValueFcstId\r\n    );\r\n    switch (sign) {\r\n      case \"date\":\r\n        curr.date = value;\r\n        break;\r\n      case \"hour\":\r\n        curr.hour = value;\r\n        break;\r\n      case \"aging\":\r\n        curr.aging = value;\r\n        break;\r\n      case \"level\":\r\n        const currClass = curr.typeEleList.find(el => el.id === curr.typeEleId);\r\n        currClass.level = value;\r\n        break;\r\n      case \"element\":\r\n        curr.typeEleList.forEach(item => {\r\n          item.eleList.forEach(el => {\r\n            if (el.id === value) {\r\n              el.checked = !el.checked;\r\n            } else {\r\n              el.checked = el.id === value;\r\n            }\r\n          });\r\n        });\r\n        break;\r\n    }\r\n  },\r\n\r\n  // 添加某一要素的显示隐藏图层的配置 payload: {[idName string]: boolean}, 这里其实要添加一个删除的mutation，但考虑产生的数据不多而且不删除也没有什么负作用，所有就省略了\r\n  add_show_hide_layer_option(state, payload) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    currSplitScreen.showHideLayerHash = Object.assign(\r\n      {},\r\n      currSplitScreen.showHideLayerHash,\r\n      payload\r\n    );\r\n  },\r\n\r\n  //显示或者隐藏某一要素图层(showHideLayerHash中的键值都来自于add_show_hide_layer_option)\r\n  show_hide_layer(state, id) {\r\n    const currSplitScreen = state[\"splitScreen\" + state.ssIndex];\r\n    const showHideHash = currSplitScreen.showHideLayerHash;\r\n    if (showHideHash[id] === undefined) throw `The ${id} doesn't exist`;\r\n    // showHideHash[id] = !showHideHash[id];\r\n    currSplitScreen.showHideLayerHash = Object.assign({}, showHideHash, {\r\n      [id]: !showHideHash[id]\r\n    });\r\n  }\r\n};\r\n"]}]}